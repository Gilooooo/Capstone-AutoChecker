"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/bootstrap";
exports.ids = ["vendor-chunks/bootstrap"];
exports.modules = {

/***/ "(ssr)/./node_modules/bootstrap/dist/js/bootstrap.js":
/*!*****************************************************!*\
  !*** ./node_modules/bootstrap/dist/js/bootstrap.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/*!\n  * Bootstrap v5.3.2 (https://getbootstrap.com/)\n  * Copyright 2011-2023 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */ (function(global, factory) {\n     true ? module.exports = factory(__webpack_require__(/*! @popperjs/core */ \"(ssr)/./node_modules/@popperjs/core/lib/index.js\")) : 0;\n})(void 0, function(Popper) {\n    \"use strict\";\n    function _interopNamespaceDefault(e) {\n        const n = Object.create(null, {\n            [Symbol.toStringTag]: {\n                value: \"Module\"\n            }\n        });\n        if (e) {\n            for(const k in e){\n                if (k !== \"default\") {\n                    const d = Object.getOwnPropertyDescriptor(e, k);\n                    Object.defineProperty(n, k, d.get ? d : {\n                        enumerable: true,\n                        get: ()=>e[k]\n                    });\n                }\n            }\n        }\n        n.default = e;\n        return Object.freeze(n);\n    }\n    const Popper__namespace = /*#__PURE__*/ _interopNamespaceDefault(Popper);\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap dom/data.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const elementMap = new Map();\n    const Data = {\n        set (element, key, instance) {\n            if (!elementMap.has(element)) {\n                elementMap.set(element, new Map());\n            }\n            const instanceMap = elementMap.get(element);\n            // make it clear we only want one instance per element\n            // can be removed later when multiple key/instances are fine to be used\n            if (!instanceMap.has(key) && instanceMap.size !== 0) {\n                // eslint-disable-next-line no-console\n                console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);\n                return;\n            }\n            instanceMap.set(key, instance);\n        },\n        get (element, key) {\n            if (elementMap.has(element)) {\n                return elementMap.get(element).get(key) || null;\n            }\n            return null;\n        },\n        remove (element, key) {\n            if (!elementMap.has(element)) {\n                return;\n            }\n            const instanceMap = elementMap.get(element);\n            instanceMap.delete(key);\n            // free up element references if there are no instances left for an element\n            if (instanceMap.size === 0) {\n                elementMap.delete(element);\n            }\n        }\n    };\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap util/index.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ const MAX_UID = 1000000;\n    const MILLISECONDS_MULTIPLIER = 1000;\n    const TRANSITION_END = \"transitionend\";\n    /**\n   * Properly escape IDs selectors to handle weird IDs\n   * @param {string} selector\n   * @returns {string}\n   */ const parseSelector = (selector)=>{\n        if (selector && window.CSS && window.CSS.escape) {\n            // document.querySelector needs escaping to handle IDs (html5+) containing for instance /\n            selector = selector.replace(/#([^\\s\"#']+)/g, (match, id)=>`#${CSS.escape(id)}`);\n        }\n        return selector;\n    };\n    // Shout-out Angus Croll (https://goo.gl/pxwQGp)\n    const toType = (object)=>{\n        if (object === null || object === undefined) {\n            return `${object}`;\n        }\n        return Object.prototype.toString.call(object).match(/\\s([a-z]+)/i)[1].toLowerCase();\n    };\n    /**\n   * Public Util API\n   */ const getUID = (prefix)=>{\n        do {\n            prefix += Math.floor(Math.random() * MAX_UID);\n        }while (document.getElementById(prefix));\n        return prefix;\n    };\n    const getTransitionDurationFromElement = (element)=>{\n        if (!element) {\n            return 0;\n        }\n        // Get transition-duration of the element\n        let { transitionDuration, transitionDelay } = window.getComputedStyle(element);\n        const floatTransitionDuration = Number.parseFloat(transitionDuration);\n        const floatTransitionDelay = Number.parseFloat(transitionDelay);\n        // Return 0 if element or transition duration is not found\n        if (!floatTransitionDuration && !floatTransitionDelay) {\n            return 0;\n        }\n        // If multiple durations are defined, take the first\n        transitionDuration = transitionDuration.split(\",\")[0];\n        transitionDelay = transitionDelay.split(\",\")[0];\n        return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;\n    };\n    const triggerTransitionEnd = (element)=>{\n        element.dispatchEvent(new Event(TRANSITION_END));\n    };\n    const isElement = (object)=>{\n        if (!object || typeof object !== \"object\") {\n            return false;\n        }\n        if (typeof object.jquery !== \"undefined\") {\n            object = object[0];\n        }\n        return typeof object.nodeType !== \"undefined\";\n    };\n    const getElement = (object)=>{\n        // it's a jQuery object or a node element\n        if (isElement(object)) {\n            return object.jquery ? object[0] : object;\n        }\n        if (typeof object === \"string\" && object.length > 0) {\n            return document.querySelector(parseSelector(object));\n        }\n        return null;\n    };\n    const isVisible = (element)=>{\n        if (!isElement(element) || element.getClientRects().length === 0) {\n            return false;\n        }\n        const elementIsVisible = getComputedStyle(element).getPropertyValue(\"visibility\") === \"visible\";\n        // Handle `details` element as its content may falsie appear visible when it is closed\n        const closedDetails = element.closest(\"details:not([open])\");\n        if (!closedDetails) {\n            return elementIsVisible;\n        }\n        if (closedDetails !== element) {\n            const summary = element.closest(\"summary\");\n            if (summary && summary.parentNode !== closedDetails) {\n                return false;\n            }\n            if (summary === null) {\n                return false;\n            }\n        }\n        return elementIsVisible;\n    };\n    const isDisabled = (element)=>{\n        if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n            return true;\n        }\n        if (element.classList.contains(\"disabled\")) {\n            return true;\n        }\n        if (typeof element.disabled !== \"undefined\") {\n            return element.disabled;\n        }\n        return element.hasAttribute(\"disabled\") && element.getAttribute(\"disabled\") !== \"false\";\n    };\n    const findShadowRoot = (element)=>{\n        if (!document.documentElement.attachShadow) {\n            return null;\n        }\n        // Can find the shadow root otherwise it'll return the document\n        if (typeof element.getRootNode === \"function\") {\n            const root = element.getRootNode();\n            return root instanceof ShadowRoot ? root : null;\n        }\n        if (element instanceof ShadowRoot) {\n            return element;\n        }\n        // when we don't find a shadow root\n        if (!element.parentNode) {\n            return null;\n        }\n        return findShadowRoot(element.parentNode);\n    };\n    const noop = ()=>{};\n    /**\n   * Trick to restart an element's animation\n   *\n   * @param {HTMLElement} element\n   * @return void\n   *\n   * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation\n   */ const reflow = (element)=>{\n        element.offsetHeight; // eslint-disable-line no-unused-expressions\n    };\n    const getjQuery = ()=>{\n        if (window.jQuery && !document.body.hasAttribute(\"data-bs-no-jquery\")) {\n            return window.jQuery;\n        }\n        return null;\n    };\n    const DOMContentLoadedCallbacks = [];\n    const onDOMContentLoaded = (callback)=>{\n        if (document.readyState === \"loading\") {\n            // add listener on the first call when the document is in loading state\n            if (!DOMContentLoadedCallbacks.length) {\n                document.addEventListener(\"DOMContentLoaded\", ()=>{\n                    for (const callback of DOMContentLoadedCallbacks){\n                        callback();\n                    }\n                });\n            }\n            DOMContentLoadedCallbacks.push(callback);\n        } else {\n            callback();\n        }\n    };\n    const isRTL = ()=>document.documentElement.dir === \"rtl\";\n    const defineJQueryPlugin = (plugin)=>{\n        onDOMContentLoaded(()=>{\n            const $ = getjQuery();\n            /* istanbul ignore if */ if ($) {\n                const name = plugin.NAME;\n                const JQUERY_NO_CONFLICT = $.fn[name];\n                $.fn[name] = plugin.jQueryInterface;\n                $.fn[name].Constructor = plugin;\n                $.fn[name].noConflict = ()=>{\n                    $.fn[name] = JQUERY_NO_CONFLICT;\n                    return plugin.jQueryInterface;\n                };\n            }\n        });\n    };\n    const execute = (possibleCallback, args = [], defaultValue = possibleCallback)=>{\n        return typeof possibleCallback === \"function\" ? possibleCallback(...args) : defaultValue;\n    };\n    const executeAfterTransition = (callback, transitionElement, waitForTransition = true)=>{\n        if (!waitForTransition) {\n            execute(callback);\n            return;\n        }\n        const durationPadding = 5;\n        const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;\n        let called = false;\n        const handler = ({ target })=>{\n            if (target !== transitionElement) {\n                return;\n            }\n            called = true;\n            transitionElement.removeEventListener(TRANSITION_END, handler);\n            execute(callback);\n        };\n        transitionElement.addEventListener(TRANSITION_END, handler);\n        setTimeout(()=>{\n            if (!called) {\n                triggerTransitionEnd(transitionElement);\n            }\n        }, emulatedDuration);\n    };\n    /**\n   * Return the previous/next element of a list.\n   *\n   * @param {array} list    The list of elements\n   * @param activeElement   The active element\n   * @param shouldGetNext   Choose to get next or previous element\n   * @param isCycleAllowed\n   * @return {Element|elem} The proper element\n   */ const getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed)=>{\n        const listLength = list.length;\n        let index = list.indexOf(activeElement);\n        // if the element does not exist in the list return an element\n        // depending on the direction and if cycle is allowed\n        if (index === -1) {\n            return !shouldGetNext && isCycleAllowed ? list[listLength - 1] : list[0];\n        }\n        index += shouldGetNext ? 1 : -1;\n        if (isCycleAllowed) {\n            index = (index + listLength) % listLength;\n        }\n        return list[Math.max(0, Math.min(index, listLength - 1))];\n    };\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap dom/event-handler.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const namespaceRegex = /[^.]*(?=\\..*)\\.|.*/;\n    const stripNameRegex = /\\..*/;\n    const stripUidRegex = /::\\d+$/;\n    const eventRegistry = {}; // Events storage\n    let uidEvent = 1;\n    const customEvents = {\n        mouseenter: \"mouseover\",\n        mouseleave: \"mouseout\"\n    };\n    const nativeEvents = new Set([\n        \"click\",\n        \"dblclick\",\n        \"mouseup\",\n        \"mousedown\",\n        \"contextmenu\",\n        \"mousewheel\",\n        \"DOMMouseScroll\",\n        \"mouseover\",\n        \"mouseout\",\n        \"mousemove\",\n        \"selectstart\",\n        \"selectend\",\n        \"keydown\",\n        \"keypress\",\n        \"keyup\",\n        \"orientationchange\",\n        \"touchstart\",\n        \"touchmove\",\n        \"touchend\",\n        \"touchcancel\",\n        \"pointerdown\",\n        \"pointermove\",\n        \"pointerup\",\n        \"pointerleave\",\n        \"pointercancel\",\n        \"gesturestart\",\n        \"gesturechange\",\n        \"gestureend\",\n        \"focus\",\n        \"blur\",\n        \"change\",\n        \"reset\",\n        \"select\",\n        \"submit\",\n        \"focusin\",\n        \"focusout\",\n        \"load\",\n        \"unload\",\n        \"beforeunload\",\n        \"resize\",\n        \"move\",\n        \"DOMContentLoaded\",\n        \"readystatechange\",\n        \"error\",\n        \"abort\",\n        \"scroll\"\n    ]);\n    /**\n   * Private methods\n   */ function makeEventUid(element, uid) {\n        return uid && `${uid}::${uidEvent++}` || element.uidEvent || uidEvent++;\n    }\n    function getElementEvents(element) {\n        const uid = makeEventUid(element);\n        element.uidEvent = uid;\n        eventRegistry[uid] = eventRegistry[uid] || {};\n        return eventRegistry[uid];\n    }\n    function bootstrapHandler(element, fn) {\n        return function handler(event) {\n            hydrateObj(event, {\n                delegateTarget: element\n            });\n            if (handler.oneOff) {\n                EventHandler.off(element, event.type, fn);\n            }\n            return fn.apply(element, [\n                event\n            ]);\n        };\n    }\n    function bootstrapDelegationHandler(element, selector, fn) {\n        return function handler(event) {\n            const domElements = element.querySelectorAll(selector);\n            for(let { target } = event; target && target !== this; target = target.parentNode){\n                for (const domElement of domElements){\n                    if (domElement !== target) {\n                        continue;\n                    }\n                    hydrateObj(event, {\n                        delegateTarget: target\n                    });\n                    if (handler.oneOff) {\n                        EventHandler.off(element, event.type, selector, fn);\n                    }\n                    return fn.apply(target, [\n                        event\n                    ]);\n                }\n            }\n        };\n    }\n    function findHandler(events, callable, delegationSelector = null) {\n        return Object.values(events).find((event)=>event.callable === callable && event.delegationSelector === delegationSelector);\n    }\n    function normalizeParameters(originalTypeEvent, handler, delegationFunction) {\n        const isDelegated = typeof handler === \"string\";\n        // TODO: tooltip passes `false` instead of selector, so we need to check\n        const callable = isDelegated ? delegationFunction : handler || delegationFunction;\n        let typeEvent = getTypeEvent(originalTypeEvent);\n        if (!nativeEvents.has(typeEvent)) {\n            typeEvent = originalTypeEvent;\n        }\n        return [\n            isDelegated,\n            callable,\n            typeEvent\n        ];\n    }\n    function addHandler(element, originalTypeEvent, handler, delegationFunction, oneOff) {\n        if (typeof originalTypeEvent !== \"string\" || !element) {\n            return;\n        }\n        let [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);\n        // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position\n        // this prevents the handler from being dispatched the same way as mouseover or mouseout does\n        if (originalTypeEvent in customEvents) {\n            const wrapFunction = (fn)=>{\n                return function(event) {\n                    if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {\n                        return fn.call(this, event);\n                    }\n                };\n            };\n            callable = wrapFunction(callable);\n        }\n        const events = getElementEvents(element);\n        const handlers = events[typeEvent] || (events[typeEvent] = {});\n        const previousFunction = findHandler(handlers, callable, isDelegated ? handler : null);\n        if (previousFunction) {\n            previousFunction.oneOff = previousFunction.oneOff && oneOff;\n            return;\n        }\n        const uid = makeEventUid(callable, originalTypeEvent.replace(namespaceRegex, \"\"));\n        const fn = isDelegated ? bootstrapDelegationHandler(element, handler, callable) : bootstrapHandler(element, callable);\n        fn.delegationSelector = isDelegated ? handler : null;\n        fn.callable = callable;\n        fn.oneOff = oneOff;\n        fn.uidEvent = uid;\n        handlers[uid] = fn;\n        element.addEventListener(typeEvent, fn, isDelegated);\n    }\n    function removeHandler(element, events, typeEvent, handler, delegationSelector) {\n        const fn = findHandler(events[typeEvent], handler, delegationSelector);\n        if (!fn) {\n            return;\n        }\n        element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));\n        delete events[typeEvent][fn.uidEvent];\n    }\n    function removeNamespacedHandlers(element, events, typeEvent, namespace) {\n        const storeElementEvent = events[typeEvent] || {};\n        for (const [handlerKey, event] of Object.entries(storeElementEvent)){\n            if (handlerKey.includes(namespace)) {\n                removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);\n            }\n        }\n    }\n    function getTypeEvent(event) {\n        // allow to get the native events from namespaced events ('click.bs.button' --> 'click')\n        event = event.replace(stripNameRegex, \"\");\n        return customEvents[event] || event;\n    }\n    const EventHandler = {\n        on (element, event, handler, delegationFunction) {\n            addHandler(element, event, handler, delegationFunction, false);\n        },\n        one (element, event, handler, delegationFunction) {\n            addHandler(element, event, handler, delegationFunction, true);\n        },\n        off (element, originalTypeEvent, handler, delegationFunction) {\n            if (typeof originalTypeEvent !== \"string\" || !element) {\n                return;\n            }\n            const [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);\n            const inNamespace = typeEvent !== originalTypeEvent;\n            const events = getElementEvents(element);\n            const storeElementEvent = events[typeEvent] || {};\n            const isNamespace = originalTypeEvent.startsWith(\".\");\n            if (typeof callable !== \"undefined\") {\n                // Simplest case: handler is passed, remove that listener ONLY.\n                if (!Object.keys(storeElementEvent).length) {\n                    return;\n                }\n                removeHandler(element, events, typeEvent, callable, isDelegated ? handler : null);\n                return;\n            }\n            if (isNamespace) {\n                for (const elementEvent of Object.keys(events)){\n                    removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));\n                }\n            }\n            for (const [keyHandlers, event] of Object.entries(storeElementEvent)){\n                const handlerKey = keyHandlers.replace(stripUidRegex, \"\");\n                if (!inNamespace || originalTypeEvent.includes(handlerKey)) {\n                    removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);\n                }\n            }\n        },\n        trigger (element, event, args) {\n            if (typeof event !== \"string\" || !element) {\n                return null;\n            }\n            const $ = getjQuery();\n            const typeEvent = getTypeEvent(event);\n            const inNamespace = event !== typeEvent;\n            let jQueryEvent = null;\n            let bubbles = true;\n            let nativeDispatch = true;\n            let defaultPrevented = false;\n            if (inNamespace && $) {\n                jQueryEvent = $.Event(event, args);\n                $(element).trigger(jQueryEvent);\n                bubbles = !jQueryEvent.isPropagationStopped();\n                nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();\n                defaultPrevented = jQueryEvent.isDefaultPrevented();\n            }\n            const evt = hydrateObj(new Event(event, {\n                bubbles,\n                cancelable: true\n            }), args);\n            if (defaultPrevented) {\n                evt.preventDefault();\n            }\n            if (nativeDispatch) {\n                element.dispatchEvent(evt);\n            }\n            if (evt.defaultPrevented && jQueryEvent) {\n                jQueryEvent.preventDefault();\n            }\n            return evt;\n        }\n    };\n    function hydrateObj(obj, meta = {}) {\n        for (const [key, value] of Object.entries(meta)){\n            try {\n                obj[key] = value;\n            } catch (_unused) {\n                Object.defineProperty(obj, key, {\n                    configurable: true,\n                    get () {\n                        return value;\n                    }\n                });\n            }\n        }\n        return obj;\n    }\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap dom/manipulator.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ function normalizeData(value) {\n        if (value === \"true\") {\n            return true;\n        }\n        if (value === \"false\") {\n            return false;\n        }\n        if (value === Number(value).toString()) {\n            return Number(value);\n        }\n        if (value === \"\" || value === \"null\") {\n            return null;\n        }\n        if (typeof value !== \"string\") {\n            return value;\n        }\n        try {\n            return JSON.parse(decodeURIComponent(value));\n        } catch (_unused) {\n            return value;\n        }\n    }\n    function normalizeDataKey(key) {\n        return key.replace(/[A-Z]/g, (chr)=>`-${chr.toLowerCase()}`);\n    }\n    const Manipulator = {\n        setDataAttribute (element, key, value) {\n            element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);\n        },\n        removeDataAttribute (element, key) {\n            element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);\n        },\n        getDataAttributes (element) {\n            if (!element) {\n                return {};\n            }\n            const attributes = {};\n            const bsKeys = Object.keys(element.dataset).filter((key)=>key.startsWith(\"bs\") && !key.startsWith(\"bsConfig\"));\n            for (const key of bsKeys){\n                let pureKey = key.replace(/^bs/, \"\");\n                pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);\n                attributes[pureKey] = normalizeData(element.dataset[key]);\n            }\n            return attributes;\n        },\n        getDataAttribute (element, key) {\n            return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));\n        }\n    };\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap util/config.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Class definition\n   */ class Config {\n        // Getters\n        static get Default() {\n            return {};\n        }\n        static get DefaultType() {\n            return {};\n        }\n        static get NAME() {\n            throw new Error('You have to implement the static method \"NAME\", for each component!');\n        }\n        _getConfig(config) {\n            config = this._mergeConfigObj(config);\n            config = this._configAfterMerge(config);\n            this._typeCheckConfig(config);\n            return config;\n        }\n        _configAfterMerge(config) {\n            return config;\n        }\n        _mergeConfigObj(config, element) {\n            const jsonConfig = isElement(element) ? Manipulator.getDataAttribute(element, \"config\") : {}; // try to parse\n            return {\n                ...this.constructor.Default,\n                ...typeof jsonConfig === \"object\" ? jsonConfig : {},\n                ...isElement(element) ? Manipulator.getDataAttributes(element) : {},\n                ...typeof config === \"object\" ? config : {}\n            };\n        }\n        _typeCheckConfig(config, configTypes = this.constructor.DefaultType) {\n            for (const [property, expectedTypes] of Object.entries(configTypes)){\n                const value = config[property];\n                const valueType = isElement(value) ? \"element\" : toType(value);\n                if (!new RegExp(expectedTypes).test(valueType)) {\n                    throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option \"${property}\" provided type \"${valueType}\" but expected type \"${expectedTypes}\".`);\n                }\n            }\n        }\n    }\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap base-component.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const VERSION = \"5.3.2\";\n    /**\n   * Class definition\n   */ class BaseComponent extends Config {\n        constructor(element, config){\n            super();\n            element = getElement(element);\n            if (!element) {\n                return;\n            }\n            this._element = element;\n            this._config = this._getConfig(config);\n            Data.set(this._element, this.constructor.DATA_KEY, this);\n        }\n        // Public\n        dispose() {\n            Data.remove(this._element, this.constructor.DATA_KEY);\n            EventHandler.off(this._element, this.constructor.EVENT_KEY);\n            for (const propertyName of Object.getOwnPropertyNames(this)){\n                this[propertyName] = null;\n            }\n        }\n        _queueCallback(callback, element, isAnimated = true) {\n            executeAfterTransition(callback, element, isAnimated);\n        }\n        _getConfig(config) {\n            config = this._mergeConfigObj(config, this._element);\n            config = this._configAfterMerge(config);\n            this._typeCheckConfig(config);\n            return config;\n        }\n        // Static\n        static getInstance(element) {\n            return Data.get(getElement(element), this.DATA_KEY);\n        }\n        static getOrCreateInstance(element, config = {}) {\n            return this.getInstance(element) || new this(element, typeof config === \"object\" ? config : null);\n        }\n        static get VERSION() {\n            return VERSION;\n        }\n        static get DATA_KEY() {\n            return `bs.${this.NAME}`;\n        }\n        static get EVENT_KEY() {\n            return `.${this.DATA_KEY}`;\n        }\n        static eventName(name) {\n            return `${name}${this.EVENT_KEY}`;\n        }\n    }\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap dom/selector-engine.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ const getSelector = (element)=>{\n        let selector = element.getAttribute(\"data-bs-target\");\n        if (!selector || selector === \"#\") {\n            let hrefAttribute = element.getAttribute(\"href\");\n            // The only valid content that could double as a selector are IDs or classes,\n            // so everything starting with `#` or `.`. If a \"real\" URL is used as the selector,\n            // `document.querySelector` will rightfully complain it is invalid.\n            // See https://github.com/twbs/bootstrap/issues/32273\n            if (!hrefAttribute || !hrefAttribute.includes(\"#\") && !hrefAttribute.startsWith(\".\")) {\n                return null;\n            }\n            // Just in case some CMS puts out a full URL with the anchor appended\n            if (hrefAttribute.includes(\"#\") && !hrefAttribute.startsWith(\"#\")) {\n                hrefAttribute = `#${hrefAttribute.split(\"#\")[1]}`;\n            }\n            selector = hrefAttribute && hrefAttribute !== \"#\" ? parseSelector(hrefAttribute.trim()) : null;\n        }\n        return selector;\n    };\n    const SelectorEngine = {\n        find (selector, element = document.documentElement) {\n            return [].concat(...Element.prototype.querySelectorAll.call(element, selector));\n        },\n        findOne (selector, element = document.documentElement) {\n            return Element.prototype.querySelector.call(element, selector);\n        },\n        children (element, selector) {\n            return [].concat(...element.children).filter((child)=>child.matches(selector));\n        },\n        parents (element, selector) {\n            const parents = [];\n            let ancestor = element.parentNode.closest(selector);\n            while(ancestor){\n                parents.push(ancestor);\n                ancestor = ancestor.parentNode.closest(selector);\n            }\n            return parents;\n        },\n        prev (element, selector) {\n            let previous = element.previousElementSibling;\n            while(previous){\n                if (previous.matches(selector)) {\n                    return [\n                        previous\n                    ];\n                }\n                previous = previous.previousElementSibling;\n            }\n            return [];\n        },\n        // TODO: this is now unused; remove later along with prev()\n        next (element, selector) {\n            let next = element.nextElementSibling;\n            while(next){\n                if (next.matches(selector)) {\n                    return [\n                        next\n                    ];\n                }\n                next = next.nextElementSibling;\n            }\n            return [];\n        },\n        focusableChildren (element) {\n            const focusables = [\n                \"a\",\n                \"button\",\n                \"input\",\n                \"textarea\",\n                \"select\",\n                \"details\",\n                \"[tabindex]\",\n                '[contenteditable=\"true\"]'\n            ].map((selector)=>`${selector}:not([tabindex^=\"-\"])`).join(\",\");\n            return this.find(focusables, element).filter((el)=>!isDisabled(el) && isVisible(el));\n        },\n        getSelectorFromElement (element) {\n            const selector = getSelector(element);\n            if (selector) {\n                return SelectorEngine.findOne(selector) ? selector : null;\n            }\n            return null;\n        },\n        getElementFromSelector (element) {\n            const selector = getSelector(element);\n            return selector ? SelectorEngine.findOne(selector) : null;\n        },\n        getMultipleElementsFromSelector (element) {\n            const selector = getSelector(element);\n            return selector ? SelectorEngine.find(selector) : [];\n        }\n    };\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap util/component-functions.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ const enableDismissTrigger = (component, method = \"hide\")=>{\n        const clickEvent = `click.dismiss${component.EVENT_KEY}`;\n        const name = component.NAME;\n        EventHandler.on(document, clickEvent, `[data-bs-dismiss=\"${name}\"]`, function(event) {\n            if ([\n                \"A\",\n                \"AREA\"\n            ].includes(this.tagName)) {\n                event.preventDefault();\n            }\n            if (isDisabled(this)) {\n                return;\n            }\n            const target = SelectorEngine.getElementFromSelector(this) || this.closest(`.${name}`);\n            const instance = component.getOrCreateInstance(target);\n            // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method\n            instance[method]();\n        });\n    };\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap alert.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$f = \"alert\";\n    const DATA_KEY$a = \"bs.alert\";\n    const EVENT_KEY$b = `.${DATA_KEY$a}`;\n    const EVENT_CLOSE = `close${EVENT_KEY$b}`;\n    const EVENT_CLOSED = `closed${EVENT_KEY$b}`;\n    const CLASS_NAME_FADE$5 = \"fade\";\n    const CLASS_NAME_SHOW$8 = \"show\";\n    /**\n   * Class definition\n   */ class Alert extends BaseComponent {\n        // Getters\n        static get NAME() {\n            return NAME$f;\n        }\n        // Public\n        close() {\n            const closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);\n            if (closeEvent.defaultPrevented) {\n                return;\n            }\n            this._element.classList.remove(CLASS_NAME_SHOW$8);\n            const isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);\n            this._queueCallback(()=>this._destroyElement(), this._element, isAnimated);\n        }\n        // Private\n        _destroyElement() {\n            this._element.remove();\n            EventHandler.trigger(this._element, EVENT_CLOSED);\n            this.dispose();\n        }\n        // Static\n        static jQueryInterface(config) {\n            return this.each(function() {\n                const data = Alert.getOrCreateInstance(this);\n                if (typeof config !== \"string\") {\n                    return;\n                }\n                if (data[config] === undefined || config.startsWith(\"_\") || config === \"constructor\") {\n                    throw new TypeError(`No method named \"${config}\"`);\n                }\n                data[config](this);\n            });\n        }\n    }\n    /**\n   * Data API implementation\n   */ enableDismissTrigger(Alert, \"close\");\n    /**\n   * jQuery\n   */ defineJQueryPlugin(Alert);\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap button.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$e = \"button\";\n    const DATA_KEY$9 = \"bs.button\";\n    const EVENT_KEY$a = `.${DATA_KEY$9}`;\n    const DATA_API_KEY$6 = \".data-api\";\n    const CLASS_NAME_ACTIVE$3 = \"active\";\n    const SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle=\"button\"]';\n    const EVENT_CLICK_DATA_API$6 = `click${EVENT_KEY$a}${DATA_API_KEY$6}`;\n    /**\n   * Class definition\n   */ class Button extends BaseComponent {\n        // Getters\n        static get NAME() {\n            return NAME$e;\n        }\n        // Public\n        toggle() {\n            // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method\n            this._element.setAttribute(\"aria-pressed\", this._element.classList.toggle(CLASS_NAME_ACTIVE$3));\n        }\n        // Static\n        static jQueryInterface(config) {\n            return this.each(function() {\n                const data = Button.getOrCreateInstance(this);\n                if (config === \"toggle\") {\n                    data[config]();\n                }\n            });\n        }\n    }\n    /**\n   * Data API implementation\n   */ EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, (event)=>{\n        event.preventDefault();\n        const button = event.target.closest(SELECTOR_DATA_TOGGLE$5);\n        const data = Button.getOrCreateInstance(button);\n        data.toggle();\n    });\n    /**\n   * jQuery\n   */ defineJQueryPlugin(Button);\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap util/swipe.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$d = \"swipe\";\n    const EVENT_KEY$9 = \".bs.swipe\";\n    const EVENT_TOUCHSTART = `touchstart${EVENT_KEY$9}`;\n    const EVENT_TOUCHMOVE = `touchmove${EVENT_KEY$9}`;\n    const EVENT_TOUCHEND = `touchend${EVENT_KEY$9}`;\n    const EVENT_POINTERDOWN = `pointerdown${EVENT_KEY$9}`;\n    const EVENT_POINTERUP = `pointerup${EVENT_KEY$9}`;\n    const POINTER_TYPE_TOUCH = \"touch\";\n    const POINTER_TYPE_PEN = \"pen\";\n    const CLASS_NAME_POINTER_EVENT = \"pointer-event\";\n    const SWIPE_THRESHOLD = 40;\n    const Default$c = {\n        endCallback: null,\n        leftCallback: null,\n        rightCallback: null\n    };\n    const DefaultType$c = {\n        endCallback: \"(function|null)\",\n        leftCallback: \"(function|null)\",\n        rightCallback: \"(function|null)\"\n    };\n    /**\n   * Class definition\n   */ class Swipe extends Config {\n        constructor(element, config){\n            super();\n            this._element = element;\n            if (!element || !Swipe.isSupported()) {\n                return;\n            }\n            this._config = this._getConfig(config);\n            this._deltaX = 0;\n            this._supportPointerEvents = Boolean(window.PointerEvent);\n            this._initEvents();\n        }\n        // Getters\n        static get Default() {\n            return Default$c;\n        }\n        static get DefaultType() {\n            return DefaultType$c;\n        }\n        static get NAME() {\n            return NAME$d;\n        }\n        // Public\n        dispose() {\n            EventHandler.off(this._element, EVENT_KEY$9);\n        }\n        // Private\n        _start(event) {\n            if (!this._supportPointerEvents) {\n                this._deltaX = event.touches[0].clientX;\n                return;\n            }\n            if (this._eventIsPointerPenTouch(event)) {\n                this._deltaX = event.clientX;\n            }\n        }\n        _end(event) {\n            if (this._eventIsPointerPenTouch(event)) {\n                this._deltaX = event.clientX - this._deltaX;\n            }\n            this._handleSwipe();\n            execute(this._config.endCallback);\n        }\n        _move(event) {\n            this._deltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - this._deltaX;\n        }\n        _handleSwipe() {\n            const absDeltaX = Math.abs(this._deltaX);\n            if (absDeltaX <= SWIPE_THRESHOLD) {\n                return;\n            }\n            const direction = absDeltaX / this._deltaX;\n            this._deltaX = 0;\n            if (!direction) {\n                return;\n            }\n            execute(direction > 0 ? this._config.rightCallback : this._config.leftCallback);\n        }\n        _initEvents() {\n            if (this._supportPointerEvents) {\n                EventHandler.on(this._element, EVENT_POINTERDOWN, (event)=>this._start(event));\n                EventHandler.on(this._element, EVENT_POINTERUP, (event)=>this._end(event));\n                this._element.classList.add(CLASS_NAME_POINTER_EVENT);\n            } else {\n                EventHandler.on(this._element, EVENT_TOUCHSTART, (event)=>this._start(event));\n                EventHandler.on(this._element, EVENT_TOUCHMOVE, (event)=>this._move(event));\n                EventHandler.on(this._element, EVENT_TOUCHEND, (event)=>this._end(event));\n            }\n        }\n        _eventIsPointerPenTouch(event) {\n            return this._supportPointerEvents && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);\n        }\n        // Static\n        static isSupported() {\n            return \"ontouchstart\" in document.documentElement || navigator.maxTouchPoints > 0;\n        }\n    }\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap carousel.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$c = \"carousel\";\n    const DATA_KEY$8 = \"bs.carousel\";\n    const EVENT_KEY$8 = `.${DATA_KEY$8}`;\n    const DATA_API_KEY$5 = \".data-api\";\n    const ARROW_LEFT_KEY$1 = \"ArrowLeft\";\n    const ARROW_RIGHT_KEY$1 = \"ArrowRight\";\n    const TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch\n    const ORDER_NEXT = \"next\";\n    const ORDER_PREV = \"prev\";\n    const DIRECTION_LEFT = \"left\";\n    const DIRECTION_RIGHT = \"right\";\n    const EVENT_SLIDE = `slide${EVENT_KEY$8}`;\n    const EVENT_SLID = `slid${EVENT_KEY$8}`;\n    const EVENT_KEYDOWN$1 = `keydown${EVENT_KEY$8}`;\n    const EVENT_MOUSEENTER$1 = `mouseenter${EVENT_KEY$8}`;\n    const EVENT_MOUSELEAVE$1 = `mouseleave${EVENT_KEY$8}`;\n    const EVENT_DRAG_START = `dragstart${EVENT_KEY$8}`;\n    const EVENT_LOAD_DATA_API$3 = `load${EVENT_KEY$8}${DATA_API_KEY$5}`;\n    const EVENT_CLICK_DATA_API$5 = `click${EVENT_KEY$8}${DATA_API_KEY$5}`;\n    const CLASS_NAME_CAROUSEL = \"carousel\";\n    const CLASS_NAME_ACTIVE$2 = \"active\";\n    const CLASS_NAME_SLIDE = \"slide\";\n    const CLASS_NAME_END = \"carousel-item-end\";\n    const CLASS_NAME_START = \"carousel-item-start\";\n    const CLASS_NAME_NEXT = \"carousel-item-next\";\n    const CLASS_NAME_PREV = \"carousel-item-prev\";\n    const SELECTOR_ACTIVE = \".active\";\n    const SELECTOR_ITEM = \".carousel-item\";\n    const SELECTOR_ACTIVE_ITEM = SELECTOR_ACTIVE + SELECTOR_ITEM;\n    const SELECTOR_ITEM_IMG = \".carousel-item img\";\n    const SELECTOR_INDICATORS = \".carousel-indicators\";\n    const SELECTOR_DATA_SLIDE = \"[data-bs-slide], [data-bs-slide-to]\";\n    const SELECTOR_DATA_RIDE = '[data-bs-ride=\"carousel\"]';\n    const KEY_TO_DIRECTION = {\n        [ARROW_LEFT_KEY$1]: DIRECTION_RIGHT,\n        [ARROW_RIGHT_KEY$1]: DIRECTION_LEFT\n    };\n    const Default$b = {\n        interval: 5000,\n        keyboard: true,\n        pause: \"hover\",\n        ride: false,\n        touch: true,\n        wrap: true\n    };\n    const DefaultType$b = {\n        interval: \"(number|boolean)\",\n        // TODO:v6 remove boolean support\n        keyboard: \"boolean\",\n        pause: \"(string|boolean)\",\n        ride: \"(boolean|string)\",\n        touch: \"boolean\",\n        wrap: \"boolean\"\n    };\n    /**\n   * Class definition\n   */ class Carousel extends BaseComponent {\n        constructor(element, config){\n            super(element, config);\n            this._interval = null;\n            this._activeElement = null;\n            this._isSliding = false;\n            this.touchTimeout = null;\n            this._swipeHelper = null;\n            this._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, this._element);\n            this._addEventListeners();\n            if (this._config.ride === CLASS_NAME_CAROUSEL) {\n                this.cycle();\n            }\n        }\n        // Getters\n        static get Default() {\n            return Default$b;\n        }\n        static get DefaultType() {\n            return DefaultType$b;\n        }\n        static get NAME() {\n            return NAME$c;\n        }\n        // Public\n        next() {\n            this._slide(ORDER_NEXT);\n        }\n        nextWhenVisible() {\n            // FIXME TODO use `document.visibilityState`\n            // Don't call next when the page isn't visible\n            // or the carousel or its parent isn't visible\n            if (!document.hidden && isVisible(this._element)) {\n                this.next();\n            }\n        }\n        prev() {\n            this._slide(ORDER_PREV);\n        }\n        pause() {\n            if (this._isSliding) {\n                triggerTransitionEnd(this._element);\n            }\n            this._clearInterval();\n        }\n        cycle() {\n            this._clearInterval();\n            this._updateInterval();\n            this._interval = setInterval(()=>this.nextWhenVisible(), this._config.interval);\n        }\n        _maybeEnableCycle() {\n            if (!this._config.ride) {\n                return;\n            }\n            if (this._isSliding) {\n                EventHandler.one(this._element, EVENT_SLID, ()=>this.cycle());\n                return;\n            }\n            this.cycle();\n        }\n        to(index) {\n            const items = this._getItems();\n            if (index > items.length - 1 || index < 0) {\n                return;\n            }\n            if (this._isSliding) {\n                EventHandler.one(this._element, EVENT_SLID, ()=>this.to(index));\n                return;\n            }\n            const activeIndex = this._getItemIndex(this._getActive());\n            if (activeIndex === index) {\n                return;\n            }\n            const order = index > activeIndex ? ORDER_NEXT : ORDER_PREV;\n            this._slide(order, items[index]);\n        }\n        dispose() {\n            if (this._swipeHelper) {\n                this._swipeHelper.dispose();\n            }\n            super.dispose();\n        }\n        // Private\n        _configAfterMerge(config) {\n            config.defaultInterval = config.interval;\n            return config;\n        }\n        _addEventListeners() {\n            if (this._config.keyboard) {\n                EventHandler.on(this._element, EVENT_KEYDOWN$1, (event)=>this._keydown(event));\n            }\n            if (this._config.pause === \"hover\") {\n                EventHandler.on(this._element, EVENT_MOUSEENTER$1, ()=>this.pause());\n                EventHandler.on(this._element, EVENT_MOUSELEAVE$1, ()=>this._maybeEnableCycle());\n            }\n            if (this._config.touch && Swipe.isSupported()) {\n                this._addTouchEventListeners();\n            }\n        }\n        _addTouchEventListeners() {\n            for (const img of SelectorEngine.find(SELECTOR_ITEM_IMG, this._element)){\n                EventHandler.on(img, EVENT_DRAG_START, (event)=>event.preventDefault());\n            }\n            const endCallBack = ()=>{\n                if (this._config.pause !== \"hover\") {\n                    return;\n                }\n                // If it's a touch-enabled device, mouseenter/leave are fired as\n                // part of the mouse compatibility events on first tap - the carousel\n                // would stop cycling until user tapped out of it;\n                // here, we listen for touchend, explicitly pause the carousel\n                // (as if it's the second time we tap on it, mouseenter compat event\n                // is NOT fired) and after a timeout (to allow for mouse compatibility\n                // events to fire) we explicitly restart cycling\n                this.pause();\n                if (this.touchTimeout) {\n                    clearTimeout(this.touchTimeout);\n                }\n                this.touchTimeout = setTimeout(()=>this._maybeEnableCycle(), TOUCHEVENT_COMPAT_WAIT + this._config.interval);\n            };\n            const swipeConfig = {\n                leftCallback: ()=>this._slide(this._directionToOrder(DIRECTION_LEFT)),\n                rightCallback: ()=>this._slide(this._directionToOrder(DIRECTION_RIGHT)),\n                endCallback: endCallBack\n            };\n            this._swipeHelper = new Swipe(this._element, swipeConfig);\n        }\n        _keydown(event) {\n            if (/input|textarea/i.test(event.target.tagName)) {\n                return;\n            }\n            const direction = KEY_TO_DIRECTION[event.key];\n            if (direction) {\n                event.preventDefault();\n                this._slide(this._directionToOrder(direction));\n            }\n        }\n        _getItemIndex(element) {\n            return this._getItems().indexOf(element);\n        }\n        _setActiveIndicatorElement(index) {\n            if (!this._indicatorsElement) {\n                return;\n            }\n            const activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE, this._indicatorsElement);\n            activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);\n            activeIndicator.removeAttribute(\"aria-current\");\n            const newActiveIndicator = SelectorEngine.findOne(`[data-bs-slide-to=\"${index}\"]`, this._indicatorsElement);\n            if (newActiveIndicator) {\n                newActiveIndicator.classList.add(CLASS_NAME_ACTIVE$2);\n                newActiveIndicator.setAttribute(\"aria-current\", \"true\");\n            }\n        }\n        _updateInterval() {\n            const element = this._activeElement || this._getActive();\n            if (!element) {\n                return;\n            }\n            const elementInterval = Number.parseInt(element.getAttribute(\"data-bs-interval\"), 10);\n            this._config.interval = elementInterval || this._config.defaultInterval;\n        }\n        _slide(order, element = null) {\n            if (this._isSliding) {\n                return;\n            }\n            const activeElement = this._getActive();\n            const isNext = order === ORDER_NEXT;\n            const nextElement = element || getNextActiveElement(this._getItems(), activeElement, isNext, this._config.wrap);\n            if (nextElement === activeElement) {\n                return;\n            }\n            const nextElementIndex = this._getItemIndex(nextElement);\n            const triggerEvent = (eventName)=>{\n                return EventHandler.trigger(this._element, eventName, {\n                    relatedTarget: nextElement,\n                    direction: this._orderToDirection(order),\n                    from: this._getItemIndex(activeElement),\n                    to: nextElementIndex\n                });\n            };\n            const slideEvent = triggerEvent(EVENT_SLIDE);\n            if (slideEvent.defaultPrevented) {\n                return;\n            }\n            if (!activeElement || !nextElement) {\n                // Some weirdness is happening, so we bail\n                // TODO: change tests that use empty divs to avoid this check\n                return;\n            }\n            const isCycling = Boolean(this._interval);\n            this.pause();\n            this._isSliding = true;\n            this._setActiveIndicatorElement(nextElementIndex);\n            this._activeElement = nextElement;\n            const directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;\n            const orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;\n            nextElement.classList.add(orderClassName);\n            reflow(nextElement);\n            activeElement.classList.add(directionalClassName);\n            nextElement.classList.add(directionalClassName);\n            const completeCallBack = ()=>{\n                nextElement.classList.remove(directionalClassName, orderClassName);\n                nextElement.classList.add(CLASS_NAME_ACTIVE$2);\n                activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);\n                this._isSliding = false;\n                triggerEvent(EVENT_SLID);\n            };\n            this._queueCallback(completeCallBack, activeElement, this._isAnimated());\n            if (isCycling) {\n                this.cycle();\n            }\n        }\n        _isAnimated() {\n            return this._element.classList.contains(CLASS_NAME_SLIDE);\n        }\n        _getActive() {\n            return SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);\n        }\n        _getItems() {\n            return SelectorEngine.find(SELECTOR_ITEM, this._element);\n        }\n        _clearInterval() {\n            if (this._interval) {\n                clearInterval(this._interval);\n                this._interval = null;\n            }\n        }\n        _directionToOrder(direction) {\n            if (isRTL()) {\n                return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;\n            }\n            return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;\n        }\n        _orderToDirection(order) {\n            if (isRTL()) {\n                return order === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;\n            }\n            return order === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;\n        }\n        // Static\n        static jQueryInterface(config) {\n            return this.each(function() {\n                const data = Carousel.getOrCreateInstance(this, config);\n                if (typeof config === \"number\") {\n                    data.to(config);\n                    return;\n                }\n                if (typeof config === \"string\") {\n                    if (data[config] === undefined || config.startsWith(\"_\") || config === \"constructor\") {\n                        throw new TypeError(`No method named \"${config}\"`);\n                    }\n                    data[config]();\n                }\n            });\n        }\n    }\n    /**\n   * Data API implementation\n   */ EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, function(event) {\n        const target = SelectorEngine.getElementFromSelector(this);\n        if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {\n            return;\n        }\n        event.preventDefault();\n        const carousel = Carousel.getOrCreateInstance(target);\n        const slideIndex = this.getAttribute(\"data-bs-slide-to\");\n        if (slideIndex) {\n            carousel.to(slideIndex);\n            carousel._maybeEnableCycle();\n            return;\n        }\n        if (Manipulator.getDataAttribute(this, \"slide\") === \"next\") {\n            carousel.next();\n            carousel._maybeEnableCycle();\n            return;\n        }\n        carousel.prev();\n        carousel._maybeEnableCycle();\n    });\n    EventHandler.on(window, EVENT_LOAD_DATA_API$3, ()=>{\n        const carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);\n        for (const carousel of carousels){\n            Carousel.getOrCreateInstance(carousel);\n        }\n    });\n    /**\n   * jQuery\n   */ defineJQueryPlugin(Carousel);\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap collapse.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$b = \"collapse\";\n    const DATA_KEY$7 = \"bs.collapse\";\n    const EVENT_KEY$7 = `.${DATA_KEY$7}`;\n    const DATA_API_KEY$4 = \".data-api\";\n    const EVENT_SHOW$6 = `show${EVENT_KEY$7}`;\n    const EVENT_SHOWN$6 = `shown${EVENT_KEY$7}`;\n    const EVENT_HIDE$6 = `hide${EVENT_KEY$7}`;\n    const EVENT_HIDDEN$6 = `hidden${EVENT_KEY$7}`;\n    const EVENT_CLICK_DATA_API$4 = `click${EVENT_KEY$7}${DATA_API_KEY$4}`;\n    const CLASS_NAME_SHOW$7 = \"show\";\n    const CLASS_NAME_COLLAPSE = \"collapse\";\n    const CLASS_NAME_COLLAPSING = \"collapsing\";\n    const CLASS_NAME_COLLAPSED = \"collapsed\";\n    const CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`;\n    const CLASS_NAME_HORIZONTAL = \"collapse-horizontal\";\n    const WIDTH = \"width\";\n    const HEIGHT = \"height\";\n    const SELECTOR_ACTIVES = \".collapse.show, .collapse.collapsing\";\n    const SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle=\"collapse\"]';\n    const Default$a = {\n        parent: null,\n        toggle: true\n    };\n    const DefaultType$a = {\n        parent: \"(null|element)\",\n        toggle: \"boolean\"\n    };\n    /**\n   * Class definition\n   */ class Collapse extends BaseComponent {\n        constructor(element, config){\n            super(element, config);\n            this._isTransitioning = false;\n            this._triggerArray = [];\n            const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);\n            for (const elem of toggleList){\n                const selector = SelectorEngine.getSelectorFromElement(elem);\n                const filterElement = SelectorEngine.find(selector).filter((foundElement)=>foundElement === this._element);\n                if (selector !== null && filterElement.length) {\n                    this._triggerArray.push(elem);\n                }\n            }\n            this._initializeChildren();\n            if (!this._config.parent) {\n                this._addAriaAndCollapsedClass(this._triggerArray, this._isShown());\n            }\n            if (this._config.toggle) {\n                this.toggle();\n            }\n        }\n        // Getters\n        static get Default() {\n            return Default$a;\n        }\n        static get DefaultType() {\n            return DefaultType$a;\n        }\n        static get NAME() {\n            return NAME$b;\n        }\n        // Public\n        toggle() {\n            if (this._isShown()) {\n                this.hide();\n            } else {\n                this.show();\n            }\n        }\n        show() {\n            if (this._isTransitioning || this._isShown()) {\n                return;\n            }\n            let activeChildren = [];\n            // find active children\n            if (this._config.parent) {\n                activeChildren = this._getFirstLevelChildren(SELECTOR_ACTIVES).filter((element)=>element !== this._element).map((element)=>Collapse.getOrCreateInstance(element, {\n                        toggle: false\n                    }));\n            }\n            if (activeChildren.length && activeChildren[0]._isTransitioning) {\n                return;\n            }\n            const startEvent = EventHandler.trigger(this._element, EVENT_SHOW$6);\n            if (startEvent.defaultPrevented) {\n                return;\n            }\n            for (const activeInstance of activeChildren){\n                activeInstance.hide();\n            }\n            const dimension = this._getDimension();\n            this._element.classList.remove(CLASS_NAME_COLLAPSE);\n            this._element.classList.add(CLASS_NAME_COLLAPSING);\n            this._element.style[dimension] = 0;\n            this._addAriaAndCollapsedClass(this._triggerArray, true);\n            this._isTransitioning = true;\n            const complete = ()=>{\n                this._isTransitioning = false;\n                this._element.classList.remove(CLASS_NAME_COLLAPSING);\n                this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);\n                this._element.style[dimension] = \"\";\n                EventHandler.trigger(this._element, EVENT_SHOWN$6);\n            };\n            const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);\n            const scrollSize = `scroll${capitalizedDimension}`;\n            this._queueCallback(complete, this._element, true);\n            this._element.style[dimension] = `${this._element[scrollSize]}px`;\n        }\n        hide() {\n            if (this._isTransitioning || !this._isShown()) {\n                return;\n            }\n            const startEvent = EventHandler.trigger(this._element, EVENT_HIDE$6);\n            if (startEvent.defaultPrevented) {\n                return;\n            }\n            const dimension = this._getDimension();\n            this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`;\n            reflow(this._element);\n            this._element.classList.add(CLASS_NAME_COLLAPSING);\n            this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);\n            for (const trigger of this._triggerArray){\n                const element = SelectorEngine.getElementFromSelector(trigger);\n                if (element && !this._isShown(element)) {\n                    this._addAriaAndCollapsedClass([\n                        trigger\n                    ], false);\n                }\n            }\n            this._isTransitioning = true;\n            const complete = ()=>{\n                this._isTransitioning = false;\n                this._element.classList.remove(CLASS_NAME_COLLAPSING);\n                this._element.classList.add(CLASS_NAME_COLLAPSE);\n                EventHandler.trigger(this._element, EVENT_HIDDEN$6);\n            };\n            this._element.style[dimension] = \"\";\n            this._queueCallback(complete, this._element, true);\n        }\n        _isShown(element = this._element) {\n            return element.classList.contains(CLASS_NAME_SHOW$7);\n        }\n        // Private\n        _configAfterMerge(config) {\n            config.toggle = Boolean(config.toggle); // Coerce string values\n            config.parent = getElement(config.parent);\n            return config;\n        }\n        _getDimension() {\n            return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;\n        }\n        _initializeChildren() {\n            if (!this._config.parent) {\n                return;\n            }\n            const children = this._getFirstLevelChildren(SELECTOR_DATA_TOGGLE$4);\n            for (const element of children){\n                const selected = SelectorEngine.getElementFromSelector(element);\n                if (selected) {\n                    this._addAriaAndCollapsedClass([\n                        element\n                    ], this._isShown(selected));\n                }\n            }\n        }\n        _getFirstLevelChildren(selector) {\n            const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);\n            // remove children if greater depth\n            return SelectorEngine.find(selector, this._config.parent).filter((element)=>!children.includes(element));\n        }\n        _addAriaAndCollapsedClass(triggerArray, isOpen) {\n            if (!triggerArray.length) {\n                return;\n            }\n            for (const element of triggerArray){\n                element.classList.toggle(CLASS_NAME_COLLAPSED, !isOpen);\n                element.setAttribute(\"aria-expanded\", isOpen);\n            }\n        }\n        // Static\n        static jQueryInterface(config) {\n            const _config = {};\n            if (typeof config === \"string\" && /show|hide/.test(config)) {\n                _config.toggle = false;\n            }\n            return this.each(function() {\n                const data = Collapse.getOrCreateInstance(this, _config);\n                if (typeof config === \"string\") {\n                    if (typeof data[config] === \"undefined\") {\n                        throw new TypeError(`No method named \"${config}\"`);\n                    }\n                    data[config]();\n                }\n            });\n        }\n    }\n    /**\n   * Data API implementation\n   */ EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function(event) {\n        // preventDefault only for <a> elements (which change the URL) not inside the collapsible element\n        if (event.target.tagName === \"A\" || event.delegateTarget && event.delegateTarget.tagName === \"A\") {\n            event.preventDefault();\n        }\n        for (const element of SelectorEngine.getMultipleElementsFromSelector(this)){\n            Collapse.getOrCreateInstance(element, {\n                toggle: false\n            }).toggle();\n        }\n    });\n    /**\n   * jQuery\n   */ defineJQueryPlugin(Collapse);\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap dropdown.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$a = \"dropdown\";\n    const DATA_KEY$6 = \"bs.dropdown\";\n    const EVENT_KEY$6 = `.${DATA_KEY$6}`;\n    const DATA_API_KEY$3 = \".data-api\";\n    const ESCAPE_KEY$2 = \"Escape\";\n    const TAB_KEY$1 = \"Tab\";\n    const ARROW_UP_KEY$1 = \"ArrowUp\";\n    const ARROW_DOWN_KEY$1 = \"ArrowDown\";\n    const RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button\n    const EVENT_HIDE$5 = `hide${EVENT_KEY$6}`;\n    const EVENT_HIDDEN$5 = `hidden${EVENT_KEY$6}`;\n    const EVENT_SHOW$5 = `show${EVENT_KEY$6}`;\n    const EVENT_SHOWN$5 = `shown${EVENT_KEY$6}`;\n    const EVENT_CLICK_DATA_API$3 = `click${EVENT_KEY$6}${DATA_API_KEY$3}`;\n    const EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY$6}${DATA_API_KEY$3}`;\n    const EVENT_KEYUP_DATA_API = `keyup${EVENT_KEY$6}${DATA_API_KEY$3}`;\n    const CLASS_NAME_SHOW$6 = \"show\";\n    const CLASS_NAME_DROPUP = \"dropup\";\n    const CLASS_NAME_DROPEND = \"dropend\";\n    const CLASS_NAME_DROPSTART = \"dropstart\";\n    const CLASS_NAME_DROPUP_CENTER = \"dropup-center\";\n    const CLASS_NAME_DROPDOWN_CENTER = \"dropdown-center\";\n    const SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle=\"dropdown\"]:not(.disabled):not(:disabled)';\n    const SELECTOR_DATA_TOGGLE_SHOWN = `${SELECTOR_DATA_TOGGLE$3}.${CLASS_NAME_SHOW$6}`;\n    const SELECTOR_MENU = \".dropdown-menu\";\n    const SELECTOR_NAVBAR = \".navbar\";\n    const SELECTOR_NAVBAR_NAV = \".navbar-nav\";\n    const SELECTOR_VISIBLE_ITEMS = \".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)\";\n    const PLACEMENT_TOP = isRTL() ? \"top-end\" : \"top-start\";\n    const PLACEMENT_TOPEND = isRTL() ? \"top-start\" : \"top-end\";\n    const PLACEMENT_BOTTOM = isRTL() ? \"bottom-end\" : \"bottom-start\";\n    const PLACEMENT_BOTTOMEND = isRTL() ? \"bottom-start\" : \"bottom-end\";\n    const PLACEMENT_RIGHT = isRTL() ? \"left-start\" : \"right-start\";\n    const PLACEMENT_LEFT = isRTL() ? \"right-start\" : \"left-start\";\n    const PLACEMENT_TOPCENTER = \"top\";\n    const PLACEMENT_BOTTOMCENTER = \"bottom\";\n    const Default$9 = {\n        autoClose: true,\n        boundary: \"clippingParents\",\n        display: \"dynamic\",\n        offset: [\n            0,\n            2\n        ],\n        popperConfig: null,\n        reference: \"toggle\"\n    };\n    const DefaultType$9 = {\n        autoClose: \"(boolean|string)\",\n        boundary: \"(string|element)\",\n        display: \"string\",\n        offset: \"(array|string|function)\",\n        popperConfig: \"(null|object|function)\",\n        reference: \"(string|element|object)\"\n    };\n    /**\n   * Class definition\n   */ class Dropdown extends BaseComponent {\n        constructor(element, config){\n            super(element, config);\n            this._popper = null;\n            this._parent = this._element.parentNode; // dropdown wrapper\n            // TODO: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.3/forms/input-group/\n            this._menu = SelectorEngine.next(this._element, SELECTOR_MENU)[0] || SelectorEngine.prev(this._element, SELECTOR_MENU)[0] || SelectorEngine.findOne(SELECTOR_MENU, this._parent);\n            this._inNavbar = this._detectNavbar();\n        }\n        // Getters\n        static get Default() {\n            return Default$9;\n        }\n        static get DefaultType() {\n            return DefaultType$9;\n        }\n        static get NAME() {\n            return NAME$a;\n        }\n        // Public\n        toggle() {\n            return this._isShown() ? this.hide() : this.show();\n        }\n        show() {\n            if (isDisabled(this._element) || this._isShown()) {\n                return;\n            }\n            const relatedTarget = {\n                relatedTarget: this._element\n            };\n            const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$5, relatedTarget);\n            if (showEvent.defaultPrevented) {\n                return;\n            }\n            this._createPopper();\n            // If this is a touch-enabled device we add extra\n            // empty mouseover listeners to the body's immediate children;\n            // only needed because of broken event delegation on iOS\n            // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n            if (\"ontouchstart\" in document.documentElement && !this._parent.closest(SELECTOR_NAVBAR_NAV)) {\n                for (const element of [].concat(...document.body.children)){\n                    EventHandler.on(element, \"mouseover\", noop);\n                }\n            }\n            this._element.focus();\n            this._element.setAttribute(\"aria-expanded\", true);\n            this._menu.classList.add(CLASS_NAME_SHOW$6);\n            this._element.classList.add(CLASS_NAME_SHOW$6);\n            EventHandler.trigger(this._element, EVENT_SHOWN$5, relatedTarget);\n        }\n        hide() {\n            if (isDisabled(this._element) || !this._isShown()) {\n                return;\n            }\n            const relatedTarget = {\n                relatedTarget: this._element\n            };\n            this._completeHide(relatedTarget);\n        }\n        dispose() {\n            if (this._popper) {\n                this._popper.destroy();\n            }\n            super.dispose();\n        }\n        update() {\n            this._inNavbar = this._detectNavbar();\n            if (this._popper) {\n                this._popper.update();\n            }\n        }\n        // Private\n        _completeHide(relatedTarget) {\n            const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$5, relatedTarget);\n            if (hideEvent.defaultPrevented) {\n                return;\n            }\n            // If this is a touch-enabled device we remove the extra\n            // empty mouseover listeners we added for iOS support\n            if (\"ontouchstart\" in document.documentElement) {\n                for (const element of [].concat(...document.body.children)){\n                    EventHandler.off(element, \"mouseover\", noop);\n                }\n            }\n            if (this._popper) {\n                this._popper.destroy();\n            }\n            this._menu.classList.remove(CLASS_NAME_SHOW$6);\n            this._element.classList.remove(CLASS_NAME_SHOW$6);\n            this._element.setAttribute(\"aria-expanded\", \"false\");\n            Manipulator.removeDataAttribute(this._menu, \"popper\");\n            EventHandler.trigger(this._element, EVENT_HIDDEN$5, relatedTarget);\n        }\n        _getConfig(config) {\n            config = super._getConfig(config);\n            if (typeof config.reference === \"object\" && !isElement(config.reference) && typeof config.reference.getBoundingClientRect !== \"function\") {\n                // Popper virtual elements require a getBoundingClientRect method\n                throw new TypeError(`${NAME$a.toUpperCase()}: Option \"reference\" provided type \"object\" without a required \"getBoundingClientRect\" method.`);\n            }\n            return config;\n        }\n        _createPopper() {\n            if (typeof Popper__namespace === \"undefined\") {\n                throw new TypeError(\"Bootstrap's dropdowns require Popper (https://popper.js.org)\");\n            }\n            let referenceElement = this._element;\n            if (this._config.reference === \"parent\") {\n                referenceElement = this._parent;\n            } else if (isElement(this._config.reference)) {\n                referenceElement = getElement(this._config.reference);\n            } else if (typeof this._config.reference === \"object\") {\n                referenceElement = this._config.reference;\n            }\n            const popperConfig = this._getPopperConfig();\n            this._popper = Popper__namespace.createPopper(referenceElement, this._menu, popperConfig);\n        }\n        _isShown() {\n            return this._menu.classList.contains(CLASS_NAME_SHOW$6);\n        }\n        _getPlacement() {\n            const parentDropdown = this._parent;\n            if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {\n                return PLACEMENT_RIGHT;\n            }\n            if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {\n                return PLACEMENT_LEFT;\n            }\n            if (parentDropdown.classList.contains(CLASS_NAME_DROPUP_CENTER)) {\n                return PLACEMENT_TOPCENTER;\n            }\n            if (parentDropdown.classList.contains(CLASS_NAME_DROPDOWN_CENTER)) {\n                return PLACEMENT_BOTTOMCENTER;\n            }\n            // We need to trim the value because custom properties can also include spaces\n            const isEnd = getComputedStyle(this._menu).getPropertyValue(\"--bs-position\").trim() === \"end\";\n            if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {\n                return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;\n            }\n            return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;\n        }\n        _detectNavbar() {\n            return this._element.closest(SELECTOR_NAVBAR) !== null;\n        }\n        _getOffset() {\n            const { offset } = this._config;\n            if (typeof offset === \"string\") {\n                return offset.split(\",\").map((value)=>Number.parseInt(value, 10));\n            }\n            if (typeof offset === \"function\") {\n                return (popperData)=>offset(popperData, this._element);\n            }\n            return offset;\n        }\n        _getPopperConfig() {\n            const defaultBsPopperConfig = {\n                placement: this._getPlacement(),\n                modifiers: [\n                    {\n                        name: \"preventOverflow\",\n                        options: {\n                            boundary: this._config.boundary\n                        }\n                    },\n                    {\n                        name: \"offset\",\n                        options: {\n                            offset: this._getOffset()\n                        }\n                    }\n                ]\n            };\n            // Disable Popper if we have a static display or Dropdown is in Navbar\n            if (this._inNavbar || this._config.display === \"static\") {\n                Manipulator.setDataAttribute(this._menu, \"popper\", \"static\"); // TODO: v6 remove\n                defaultBsPopperConfig.modifiers = [\n                    {\n                        name: \"applyStyles\",\n                        enabled: false\n                    }\n                ];\n            }\n            return {\n                ...defaultBsPopperConfig,\n                ...execute(this._config.popperConfig, [\n                    defaultBsPopperConfig\n                ])\n            };\n        }\n        _selectMenuItem({ key, target }) {\n            const items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter((element)=>isVisible(element));\n            if (!items.length) {\n                return;\n            }\n            // if target isn't included in items (e.g. when expanding the dropdown)\n            // allow cycling to get the last item in case key equals ARROW_UP_KEY\n            getNextActiveElement(items, target, key === ARROW_DOWN_KEY$1, !items.includes(target)).focus();\n        }\n        // Static\n        static jQueryInterface(config) {\n            return this.each(function() {\n                const data = Dropdown.getOrCreateInstance(this, config);\n                if (typeof config !== \"string\") {\n                    return;\n                }\n                if (typeof data[config] === \"undefined\") {\n                    throw new TypeError(`No method named \"${config}\"`);\n                }\n                data[config]();\n            });\n        }\n        static clearMenus(event) {\n            if (event.button === RIGHT_MOUSE_BUTTON || event.type === \"keyup\" && event.key !== TAB_KEY$1) {\n                return;\n            }\n            const openToggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE_SHOWN);\n            for (const toggle of openToggles){\n                const context = Dropdown.getInstance(toggle);\n                if (!context || context._config.autoClose === false) {\n                    continue;\n                }\n                const composedPath = event.composedPath();\n                const isMenuTarget = composedPath.includes(context._menu);\n                if (composedPath.includes(context._element) || context._config.autoClose === \"inside\" && !isMenuTarget || context._config.autoClose === \"outside\" && isMenuTarget) {\n                    continue;\n                }\n                // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu\n                if (context._menu.contains(event.target) && (event.type === \"keyup\" && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) {\n                    continue;\n                }\n                const relatedTarget = {\n                    relatedTarget: context._element\n                };\n                if (event.type === \"click\") {\n                    relatedTarget.clickEvent = event;\n                }\n                context._completeHide(relatedTarget);\n            }\n        }\n        static dataApiKeydownHandler(event) {\n            // If not an UP | DOWN | ESCAPE key => not a dropdown command\n            // If input/textarea && if key is other than ESCAPE => not a dropdown command\n            const isInput = /input|textarea/i.test(event.target.tagName);\n            const isEscapeEvent = event.key === ESCAPE_KEY$2;\n            const isUpOrDownEvent = [\n                ARROW_UP_KEY$1,\n                ARROW_DOWN_KEY$1\n            ].includes(event.key);\n            if (!isUpOrDownEvent && !isEscapeEvent) {\n                return;\n            }\n            if (isInput && !isEscapeEvent) {\n                return;\n            }\n            event.preventDefault();\n            // TODO: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.3/forms/input-group/\n            const getToggleButton = this.matches(SELECTOR_DATA_TOGGLE$3) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.next(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.findOne(SELECTOR_DATA_TOGGLE$3, event.delegateTarget.parentNode);\n            const instance = Dropdown.getOrCreateInstance(getToggleButton);\n            if (isUpOrDownEvent) {\n                event.stopPropagation();\n                instance.show();\n                instance._selectMenuItem(event);\n                return;\n            }\n            if (instance._isShown()) {\n                // else is escape and we check if it is shown\n                event.stopPropagation();\n                instance.hide();\n                getToggleButton.focus();\n            }\n        }\n    }\n    /**\n   * Data API implementation\n   */ EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);\n    EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);\n    EventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);\n    EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);\n    EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function(event) {\n        event.preventDefault();\n        Dropdown.getOrCreateInstance(this).toggle();\n    });\n    /**\n   * jQuery\n   */ defineJQueryPlugin(Dropdown);\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap util/backdrop.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$9 = \"backdrop\";\n    const CLASS_NAME_FADE$4 = \"fade\";\n    const CLASS_NAME_SHOW$5 = \"show\";\n    const EVENT_MOUSEDOWN = `mousedown.bs.${NAME$9}`;\n    const Default$8 = {\n        className: \"modal-backdrop\",\n        clickCallback: null,\n        isAnimated: false,\n        isVisible: true,\n        // if false, we use the backdrop helper without adding any element to the dom\n        rootElement: \"body\" // give the choice to place backdrop under different elements\n    };\n    const DefaultType$8 = {\n        className: \"string\",\n        clickCallback: \"(function|null)\",\n        isAnimated: \"boolean\",\n        isVisible: \"boolean\",\n        rootElement: \"(element|string)\"\n    };\n    /**\n   * Class definition\n   */ class Backdrop extends Config {\n        constructor(config){\n            super();\n            this._config = this._getConfig(config);\n            this._isAppended = false;\n            this._element = null;\n        }\n        // Getters\n        static get Default() {\n            return Default$8;\n        }\n        static get DefaultType() {\n            return DefaultType$8;\n        }\n        static get NAME() {\n            return NAME$9;\n        }\n        // Public\n        show(callback) {\n            if (!this._config.isVisible) {\n                execute(callback);\n                return;\n            }\n            this._append();\n            const element = this._getElement();\n            if (this._config.isAnimated) {\n                reflow(element);\n            }\n            element.classList.add(CLASS_NAME_SHOW$5);\n            this._emulateAnimation(()=>{\n                execute(callback);\n            });\n        }\n        hide(callback) {\n            if (!this._config.isVisible) {\n                execute(callback);\n                return;\n            }\n            this._getElement().classList.remove(CLASS_NAME_SHOW$5);\n            this._emulateAnimation(()=>{\n                this.dispose();\n                execute(callback);\n            });\n        }\n        dispose() {\n            if (!this._isAppended) {\n                return;\n            }\n            EventHandler.off(this._element, EVENT_MOUSEDOWN);\n            this._element.remove();\n            this._isAppended = false;\n        }\n        // Private\n        _getElement() {\n            if (!this._element) {\n                const backdrop = document.createElement(\"div\");\n                backdrop.className = this._config.className;\n                if (this._config.isAnimated) {\n                    backdrop.classList.add(CLASS_NAME_FADE$4);\n                }\n                this._element = backdrop;\n            }\n            return this._element;\n        }\n        _configAfterMerge(config) {\n            // use getElement() with the default \"body\" to get a fresh Element on each instantiation\n            config.rootElement = getElement(config.rootElement);\n            return config;\n        }\n        _append() {\n            if (this._isAppended) {\n                return;\n            }\n            const element = this._getElement();\n            this._config.rootElement.append(element);\n            EventHandler.on(element, EVENT_MOUSEDOWN, ()=>{\n                execute(this._config.clickCallback);\n            });\n            this._isAppended = true;\n        }\n        _emulateAnimation(callback) {\n            executeAfterTransition(callback, this._getElement(), this._config.isAnimated);\n        }\n    }\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap util/focustrap.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$8 = \"focustrap\";\n    const DATA_KEY$5 = \"bs.focustrap\";\n    const EVENT_KEY$5 = `.${DATA_KEY$5}`;\n    const EVENT_FOCUSIN$2 = `focusin${EVENT_KEY$5}`;\n    const EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY$5}`;\n    const TAB_KEY = \"Tab\";\n    const TAB_NAV_FORWARD = \"forward\";\n    const TAB_NAV_BACKWARD = \"backward\";\n    const Default$7 = {\n        autofocus: true,\n        trapElement: null // The element to trap focus inside of\n    };\n    const DefaultType$7 = {\n        autofocus: \"boolean\",\n        trapElement: \"element\"\n    };\n    /**\n   * Class definition\n   */ class FocusTrap extends Config {\n        constructor(config){\n            super();\n            this._config = this._getConfig(config);\n            this._isActive = false;\n            this._lastTabNavDirection = null;\n        }\n        // Getters\n        static get Default() {\n            return Default$7;\n        }\n        static get DefaultType() {\n            return DefaultType$7;\n        }\n        static get NAME() {\n            return NAME$8;\n        }\n        // Public\n        activate() {\n            if (this._isActive) {\n                return;\n            }\n            if (this._config.autofocus) {\n                this._config.trapElement.focus();\n            }\n            EventHandler.off(document, EVENT_KEY$5); // guard against infinite focus loop\n            EventHandler.on(document, EVENT_FOCUSIN$2, (event)=>this._handleFocusin(event));\n            EventHandler.on(document, EVENT_KEYDOWN_TAB, (event)=>this._handleKeydown(event));\n            this._isActive = true;\n        }\n        deactivate() {\n            if (!this._isActive) {\n                return;\n            }\n            this._isActive = false;\n            EventHandler.off(document, EVENT_KEY$5);\n        }\n        // Private\n        _handleFocusin(event) {\n            const { trapElement } = this._config;\n            if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) {\n                return;\n            }\n            const elements = SelectorEngine.focusableChildren(trapElement);\n            if (elements.length === 0) {\n                trapElement.focus();\n            } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {\n                elements[elements.length - 1].focus();\n            } else {\n                elements[0].focus();\n            }\n        }\n        _handleKeydown(event) {\n            if (event.key !== TAB_KEY) {\n                return;\n            }\n            this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;\n        }\n    }\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap util/scrollBar.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const SELECTOR_FIXED_CONTENT = \".fixed-top, .fixed-bottom, .is-fixed, .sticky-top\";\n    const SELECTOR_STICKY_CONTENT = \".sticky-top\";\n    const PROPERTY_PADDING = \"padding-right\";\n    const PROPERTY_MARGIN = \"margin-right\";\n    /**\n   * Class definition\n   */ class ScrollBarHelper {\n        constructor(){\n            this._element = document.body;\n        }\n        // Public\n        getWidth() {\n            // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes\n            const documentWidth = document.documentElement.clientWidth;\n            return Math.abs(window.innerWidth - documentWidth);\n        }\n        hide() {\n            const width = this.getWidth();\n            this._disableOverFlow();\n            // give padding to element to balance the hidden scrollbar width\n            this._setElementAttributes(this._element, PROPERTY_PADDING, (calculatedValue)=>calculatedValue + width);\n            // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth\n            this._setElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING, (calculatedValue)=>calculatedValue + width);\n            this._setElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN, (calculatedValue)=>calculatedValue - width);\n        }\n        reset() {\n            this._resetElementAttributes(this._element, \"overflow\");\n            this._resetElementAttributes(this._element, PROPERTY_PADDING);\n            this._resetElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING);\n            this._resetElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN);\n        }\n        isOverflowing() {\n            return this.getWidth() > 0;\n        }\n        // Private\n        _disableOverFlow() {\n            this._saveInitialAttribute(this._element, \"overflow\");\n            this._element.style.overflow = \"hidden\";\n        }\n        _setElementAttributes(selector, styleProperty, callback) {\n            const scrollbarWidth = this.getWidth();\n            const manipulationCallBack = (element)=>{\n                if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) {\n                    return;\n                }\n                this._saveInitialAttribute(element, styleProperty);\n                const calculatedValue = window.getComputedStyle(element).getPropertyValue(styleProperty);\n                element.style.setProperty(styleProperty, `${callback(Number.parseFloat(calculatedValue))}px`);\n            };\n            this._applyManipulationCallback(selector, manipulationCallBack);\n        }\n        _saveInitialAttribute(element, styleProperty) {\n            const actualValue = element.style.getPropertyValue(styleProperty);\n            if (actualValue) {\n                Manipulator.setDataAttribute(element, styleProperty, actualValue);\n            }\n        }\n        _resetElementAttributes(selector, styleProperty) {\n            const manipulationCallBack = (element)=>{\n                const value = Manipulator.getDataAttribute(element, styleProperty);\n                // We only want to remove the property if the value is `null`; the value can also be zero\n                if (value === null) {\n                    element.style.removeProperty(styleProperty);\n                    return;\n                }\n                Manipulator.removeDataAttribute(element, styleProperty);\n                element.style.setProperty(styleProperty, value);\n            };\n            this._applyManipulationCallback(selector, manipulationCallBack);\n        }\n        _applyManipulationCallback(selector, callBack) {\n            if (isElement(selector)) {\n                callBack(selector);\n                return;\n            }\n            for (const sel of SelectorEngine.find(selector, this._element)){\n                callBack(sel);\n            }\n        }\n    }\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap modal.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$7 = \"modal\";\n    const DATA_KEY$4 = \"bs.modal\";\n    const EVENT_KEY$4 = `.${DATA_KEY$4}`;\n    const DATA_API_KEY$2 = \".data-api\";\n    const ESCAPE_KEY$1 = \"Escape\";\n    const EVENT_HIDE$4 = `hide${EVENT_KEY$4}`;\n    const EVENT_HIDE_PREVENTED$1 = `hidePrevented${EVENT_KEY$4}`;\n    const EVENT_HIDDEN$4 = `hidden${EVENT_KEY$4}`;\n    const EVENT_SHOW$4 = `show${EVENT_KEY$4}`;\n    const EVENT_SHOWN$4 = `shown${EVENT_KEY$4}`;\n    const EVENT_RESIZE$1 = `resize${EVENT_KEY$4}`;\n    const EVENT_CLICK_DISMISS = `click.dismiss${EVENT_KEY$4}`;\n    const EVENT_MOUSEDOWN_DISMISS = `mousedown.dismiss${EVENT_KEY$4}`;\n    const EVENT_KEYDOWN_DISMISS$1 = `keydown.dismiss${EVENT_KEY$4}`;\n    const EVENT_CLICK_DATA_API$2 = `click${EVENT_KEY$4}${DATA_API_KEY$2}`;\n    const CLASS_NAME_OPEN = \"modal-open\";\n    const CLASS_NAME_FADE$3 = \"fade\";\n    const CLASS_NAME_SHOW$4 = \"show\";\n    const CLASS_NAME_STATIC = \"modal-static\";\n    const OPEN_SELECTOR$1 = \".modal.show\";\n    const SELECTOR_DIALOG = \".modal-dialog\";\n    const SELECTOR_MODAL_BODY = \".modal-body\";\n    const SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle=\"modal\"]';\n    const Default$6 = {\n        backdrop: true,\n        focus: true,\n        keyboard: true\n    };\n    const DefaultType$6 = {\n        backdrop: \"(boolean|string)\",\n        focus: \"boolean\",\n        keyboard: \"boolean\"\n    };\n    /**\n   * Class definition\n   */ class Modal extends BaseComponent {\n        constructor(element, config){\n            super(element, config);\n            this._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, this._element);\n            this._backdrop = this._initializeBackDrop();\n            this._focustrap = this._initializeFocusTrap();\n            this._isShown = false;\n            this._isTransitioning = false;\n            this._scrollBar = new ScrollBarHelper();\n            this._addEventListeners();\n        }\n        // Getters\n        static get Default() {\n            return Default$6;\n        }\n        static get DefaultType() {\n            return DefaultType$6;\n        }\n        static get NAME() {\n            return NAME$7;\n        }\n        // Public\n        toggle(relatedTarget) {\n            return this._isShown ? this.hide() : this.show(relatedTarget);\n        }\n        show(relatedTarget) {\n            if (this._isShown || this._isTransitioning) {\n                return;\n            }\n            const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, {\n                relatedTarget\n            });\n            if (showEvent.defaultPrevented) {\n                return;\n            }\n            this._isShown = true;\n            this._isTransitioning = true;\n            this._scrollBar.hide();\n            document.body.classList.add(CLASS_NAME_OPEN);\n            this._adjustDialog();\n            this._backdrop.show(()=>this._showElement(relatedTarget));\n        }\n        hide() {\n            if (!this._isShown || this._isTransitioning) {\n                return;\n            }\n            const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4);\n            if (hideEvent.defaultPrevented) {\n                return;\n            }\n            this._isShown = false;\n            this._isTransitioning = true;\n            this._focustrap.deactivate();\n            this._element.classList.remove(CLASS_NAME_SHOW$4);\n            this._queueCallback(()=>this._hideModal(), this._element, this._isAnimated());\n        }\n        dispose() {\n            EventHandler.off(window, EVENT_KEY$4);\n            EventHandler.off(this._dialog, EVENT_KEY$4);\n            this._backdrop.dispose();\n            this._focustrap.deactivate();\n            super.dispose();\n        }\n        handleUpdate() {\n            this._adjustDialog();\n        }\n        // Private\n        _initializeBackDrop() {\n            return new Backdrop({\n                isVisible: Boolean(this._config.backdrop),\n                // 'static' option will be translated to true, and booleans will keep their value,\n                isAnimated: this._isAnimated()\n            });\n        }\n        _initializeFocusTrap() {\n            return new FocusTrap({\n                trapElement: this._element\n            });\n        }\n        _showElement(relatedTarget) {\n            // try to append dynamic modal\n            if (!document.body.contains(this._element)) {\n                document.body.append(this._element);\n            }\n            this._element.style.display = \"block\";\n            this._element.removeAttribute(\"aria-hidden\");\n            this._element.setAttribute(\"aria-modal\", true);\n            this._element.setAttribute(\"role\", \"dialog\");\n            this._element.scrollTop = 0;\n            const modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);\n            if (modalBody) {\n                modalBody.scrollTop = 0;\n            }\n            reflow(this._element);\n            this._element.classList.add(CLASS_NAME_SHOW$4);\n            const transitionComplete = ()=>{\n                if (this._config.focus) {\n                    this._focustrap.activate();\n                }\n                this._isTransitioning = false;\n                EventHandler.trigger(this._element, EVENT_SHOWN$4, {\n                    relatedTarget\n                });\n            };\n            this._queueCallback(transitionComplete, this._dialog, this._isAnimated());\n        }\n        _addEventListeners() {\n            EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, (event)=>{\n                if (event.key !== ESCAPE_KEY$1) {\n                    return;\n                }\n                if (this._config.keyboard) {\n                    this.hide();\n                    return;\n                }\n                this._triggerBackdropTransition();\n            });\n            EventHandler.on(window, EVENT_RESIZE$1, ()=>{\n                if (this._isShown && !this._isTransitioning) {\n                    this._adjustDialog();\n                }\n            });\n            EventHandler.on(this._element, EVENT_MOUSEDOWN_DISMISS, (event)=>{\n                // a bad trick to segregate clicks that may start inside dialog but end outside, and avoid listen to scrollbar clicks\n                EventHandler.one(this._element, EVENT_CLICK_DISMISS, (event2)=>{\n                    if (this._element !== event.target || this._element !== event2.target) {\n                        return;\n                    }\n                    if (this._config.backdrop === \"static\") {\n                        this._triggerBackdropTransition();\n                        return;\n                    }\n                    if (this._config.backdrop) {\n                        this.hide();\n                    }\n                });\n            });\n        }\n        _hideModal() {\n            this._element.style.display = \"none\";\n            this._element.setAttribute(\"aria-hidden\", true);\n            this._element.removeAttribute(\"aria-modal\");\n            this._element.removeAttribute(\"role\");\n            this._isTransitioning = false;\n            this._backdrop.hide(()=>{\n                document.body.classList.remove(CLASS_NAME_OPEN);\n                this._resetAdjustments();\n                this._scrollBar.reset();\n                EventHandler.trigger(this._element, EVENT_HIDDEN$4);\n            });\n        }\n        _isAnimated() {\n            return this._element.classList.contains(CLASS_NAME_FADE$3);\n        }\n        _triggerBackdropTransition() {\n            const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED$1);\n            if (hideEvent.defaultPrevented) {\n                return;\n            }\n            const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\n            const initialOverflowY = this._element.style.overflowY;\n            // return if the following background transition hasn't yet completed\n            if (initialOverflowY === \"hidden\" || this._element.classList.contains(CLASS_NAME_STATIC)) {\n                return;\n            }\n            if (!isModalOverflowing) {\n                this._element.style.overflowY = \"hidden\";\n            }\n            this._element.classList.add(CLASS_NAME_STATIC);\n            this._queueCallback(()=>{\n                this._element.classList.remove(CLASS_NAME_STATIC);\n                this._queueCallback(()=>{\n                    this._element.style.overflowY = initialOverflowY;\n                }, this._dialog);\n            }, this._dialog);\n            this._element.focus();\n        }\n        /**\n     * The following methods are used to handle overflowing modals\n     */ _adjustDialog() {\n            const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\n            const scrollbarWidth = this._scrollBar.getWidth();\n            const isBodyOverflowing = scrollbarWidth > 0;\n            if (isBodyOverflowing && !isModalOverflowing) {\n                const property = isRTL() ? \"paddingLeft\" : \"paddingRight\";\n                this._element.style[property] = `${scrollbarWidth}px`;\n            }\n            if (!isBodyOverflowing && isModalOverflowing) {\n                const property = isRTL() ? \"paddingRight\" : \"paddingLeft\";\n                this._element.style[property] = `${scrollbarWidth}px`;\n            }\n        }\n        _resetAdjustments() {\n            this._element.style.paddingLeft = \"\";\n            this._element.style.paddingRight = \"\";\n        }\n        // Static\n        static jQueryInterface(config, relatedTarget) {\n            return this.each(function() {\n                const data = Modal.getOrCreateInstance(this, config);\n                if (typeof config !== \"string\") {\n                    return;\n                }\n                if (typeof data[config] === \"undefined\") {\n                    throw new TypeError(`No method named \"${config}\"`);\n                }\n                data[config](relatedTarget);\n            });\n        }\n    }\n    /**\n   * Data API implementation\n   */ EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function(event) {\n        const target = SelectorEngine.getElementFromSelector(this);\n        if ([\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName)) {\n            event.preventDefault();\n        }\n        EventHandler.one(target, EVENT_SHOW$4, (showEvent)=>{\n            if (showEvent.defaultPrevented) {\n                // only register focus restorer if modal will actually get shown\n                return;\n            }\n            EventHandler.one(target, EVENT_HIDDEN$4, ()=>{\n                if (isVisible(this)) {\n                    this.focus();\n                }\n            });\n        });\n        // avoid conflict when clicking modal toggler while another one is open\n        const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR$1);\n        if (alreadyOpen) {\n            Modal.getInstance(alreadyOpen).hide();\n        }\n        const data = Modal.getOrCreateInstance(target);\n        data.toggle(this);\n    });\n    enableDismissTrigger(Modal);\n    /**\n   * jQuery\n   */ defineJQueryPlugin(Modal);\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap offcanvas.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$6 = \"offcanvas\";\n    const DATA_KEY$3 = \"bs.offcanvas\";\n    const EVENT_KEY$3 = `.${DATA_KEY$3}`;\n    const DATA_API_KEY$1 = \".data-api\";\n    const EVENT_LOAD_DATA_API$2 = `load${EVENT_KEY$3}${DATA_API_KEY$1}`;\n    const ESCAPE_KEY = \"Escape\";\n    const CLASS_NAME_SHOW$3 = \"show\";\n    const CLASS_NAME_SHOWING$1 = \"showing\";\n    const CLASS_NAME_HIDING = \"hiding\";\n    const CLASS_NAME_BACKDROP = \"offcanvas-backdrop\";\n    const OPEN_SELECTOR = \".offcanvas.show\";\n    const EVENT_SHOW$3 = `show${EVENT_KEY$3}`;\n    const EVENT_SHOWN$3 = `shown${EVENT_KEY$3}`;\n    const EVENT_HIDE$3 = `hide${EVENT_KEY$3}`;\n    const EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY$3}`;\n    const EVENT_HIDDEN$3 = `hidden${EVENT_KEY$3}`;\n    const EVENT_RESIZE = `resize${EVENT_KEY$3}`;\n    const EVENT_CLICK_DATA_API$1 = `click${EVENT_KEY$3}${DATA_API_KEY$1}`;\n    const EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY$3}`;\n    const SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle=\"offcanvas\"]';\n    const Default$5 = {\n        backdrop: true,\n        keyboard: true,\n        scroll: false\n    };\n    const DefaultType$5 = {\n        backdrop: \"(boolean|string)\",\n        keyboard: \"boolean\",\n        scroll: \"boolean\"\n    };\n    /**\n   * Class definition\n   */ class Offcanvas extends BaseComponent {\n        constructor(element, config){\n            super(element, config);\n            this._isShown = false;\n            this._backdrop = this._initializeBackDrop();\n            this._focustrap = this._initializeFocusTrap();\n            this._addEventListeners();\n        }\n        // Getters\n        static get Default() {\n            return Default$5;\n        }\n        static get DefaultType() {\n            return DefaultType$5;\n        }\n        static get NAME() {\n            return NAME$6;\n        }\n        // Public\n        toggle(relatedTarget) {\n            return this._isShown ? this.hide() : this.show(relatedTarget);\n        }\n        show(relatedTarget) {\n            if (this._isShown) {\n                return;\n            }\n            const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {\n                relatedTarget\n            });\n            if (showEvent.defaultPrevented) {\n                return;\n            }\n            this._isShown = true;\n            this._backdrop.show();\n            if (!this._config.scroll) {\n                new ScrollBarHelper().hide();\n            }\n            this._element.setAttribute(\"aria-modal\", true);\n            this._element.setAttribute(\"role\", \"dialog\");\n            this._element.classList.add(CLASS_NAME_SHOWING$1);\n            const completeCallBack = ()=>{\n                if (!this._config.scroll || this._config.backdrop) {\n                    this._focustrap.activate();\n                }\n                this._element.classList.add(CLASS_NAME_SHOW$3);\n                this._element.classList.remove(CLASS_NAME_SHOWING$1);\n                EventHandler.trigger(this._element, EVENT_SHOWN$3, {\n                    relatedTarget\n                });\n            };\n            this._queueCallback(completeCallBack, this._element, true);\n        }\n        hide() {\n            if (!this._isShown) {\n                return;\n            }\n            const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);\n            if (hideEvent.defaultPrevented) {\n                return;\n            }\n            this._focustrap.deactivate();\n            this._element.blur();\n            this._isShown = false;\n            this._element.classList.add(CLASS_NAME_HIDING);\n            this._backdrop.hide();\n            const completeCallback = ()=>{\n                this._element.classList.remove(CLASS_NAME_SHOW$3, CLASS_NAME_HIDING);\n                this._element.removeAttribute(\"aria-modal\");\n                this._element.removeAttribute(\"role\");\n                if (!this._config.scroll) {\n                    new ScrollBarHelper().reset();\n                }\n                EventHandler.trigger(this._element, EVENT_HIDDEN$3);\n            };\n            this._queueCallback(completeCallback, this._element, true);\n        }\n        dispose() {\n            this._backdrop.dispose();\n            this._focustrap.deactivate();\n            super.dispose();\n        }\n        // Private\n        _initializeBackDrop() {\n            const clickCallback = ()=>{\n                if (this._config.backdrop === \"static\") {\n                    EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);\n                    return;\n                }\n                this.hide();\n            };\n            // 'static' option will be translated to true, and booleans will keep their value\n            const isVisible = Boolean(this._config.backdrop);\n            return new Backdrop({\n                className: CLASS_NAME_BACKDROP,\n                isVisible,\n                isAnimated: true,\n                rootElement: this._element.parentNode,\n                clickCallback: isVisible ? clickCallback : null\n            });\n        }\n        _initializeFocusTrap() {\n            return new FocusTrap({\n                trapElement: this._element\n            });\n        }\n        _addEventListeners() {\n            EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, (event)=>{\n                if (event.key !== ESCAPE_KEY) {\n                    return;\n                }\n                if (this._config.keyboard) {\n                    this.hide();\n                    return;\n                }\n                EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);\n            });\n        }\n        // Static\n        static jQueryInterface(config) {\n            return this.each(function() {\n                const data = Offcanvas.getOrCreateInstance(this, config);\n                if (typeof config !== \"string\") {\n                    return;\n                }\n                if (data[config] === undefined || config.startsWith(\"_\") || config === \"constructor\") {\n                    throw new TypeError(`No method named \"${config}\"`);\n                }\n                data[config](this);\n            });\n        }\n    }\n    /**\n   * Data API implementation\n   */ EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function(event) {\n        const target = SelectorEngine.getElementFromSelector(this);\n        if ([\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName)) {\n            event.preventDefault();\n        }\n        if (isDisabled(this)) {\n            return;\n        }\n        EventHandler.one(target, EVENT_HIDDEN$3, ()=>{\n            // focus on trigger when it is closed\n            if (isVisible(this)) {\n                this.focus();\n            }\n        });\n        // avoid conflict when clicking a toggler of an offcanvas, while another is open\n        const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);\n        if (alreadyOpen && alreadyOpen !== target) {\n            Offcanvas.getInstance(alreadyOpen).hide();\n        }\n        const data = Offcanvas.getOrCreateInstance(target);\n        data.toggle(this);\n    });\n    EventHandler.on(window, EVENT_LOAD_DATA_API$2, ()=>{\n        for (const selector of SelectorEngine.find(OPEN_SELECTOR)){\n            Offcanvas.getOrCreateInstance(selector).show();\n        }\n    });\n    EventHandler.on(window, EVENT_RESIZE, ()=>{\n        for (const element of SelectorEngine.find(\"[aria-modal][class*=show][class*=offcanvas-]\")){\n            if (getComputedStyle(element).position !== \"fixed\") {\n                Offcanvas.getOrCreateInstance(element).hide();\n            }\n        }\n    });\n    enableDismissTrigger(Offcanvas);\n    /**\n   * jQuery\n   */ defineJQueryPlugin(Offcanvas);\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap util/sanitizer.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ // js-docs-start allow-list\n    const ARIA_ATTRIBUTE_PATTERN = /^aria-[\\w-]*$/i;\n    const DefaultAllowlist = {\n        // Global attributes allowed on any supplied element below.\n        \"*\": [\n            \"class\",\n            \"dir\",\n            \"id\",\n            \"lang\",\n            \"role\",\n            ARIA_ATTRIBUTE_PATTERN\n        ],\n        a: [\n            \"target\",\n            \"href\",\n            \"title\",\n            \"rel\"\n        ],\n        area: [],\n        b: [],\n        br: [],\n        col: [],\n        code: [],\n        div: [],\n        em: [],\n        hr: [],\n        h1: [],\n        h2: [],\n        h3: [],\n        h4: [],\n        h5: [],\n        h6: [],\n        i: [],\n        img: [\n            \"src\",\n            \"srcset\",\n            \"alt\",\n            \"title\",\n            \"width\",\n            \"height\"\n        ],\n        li: [],\n        ol: [],\n        p: [],\n        pre: [],\n        s: [],\n        small: [],\n        span: [],\n        sub: [],\n        sup: [],\n        strong: [],\n        u: [],\n        ul: []\n    };\n    // js-docs-end allow-list\n    const uriAttributes = new Set([\n        \"background\",\n        \"cite\",\n        \"href\",\n        \"itemtype\",\n        \"longdesc\",\n        \"poster\",\n        \"src\",\n        \"xlink:href\"\n    ]);\n    /**\n   * A pattern that recognizes URLs that are safe wrt. XSS in URL navigation\n   * contexts.\n   *\n   * Shout-out to Angular https://github.com/angular/angular/blob/15.2.8/packages/core/src/sanitization/url_sanitizer.ts#L38\n   */ // eslint-disable-next-line unicorn/better-regex\n    const SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i;\n    const allowedAttribute = (attribute, allowedAttributeList)=>{\n        const attributeName = attribute.nodeName.toLowerCase();\n        if (allowedAttributeList.includes(attributeName)) {\n            if (uriAttributes.has(attributeName)) {\n                return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue));\n            }\n            return true;\n        }\n        // Check if a regular expression validates the attribute.\n        return allowedAttributeList.filter((attributeRegex)=>attributeRegex instanceof RegExp).some((regex)=>regex.test(attributeName));\n    };\n    function sanitizeHtml(unsafeHtml, allowList, sanitizeFunction) {\n        if (!unsafeHtml.length) {\n            return unsafeHtml;\n        }\n        if (sanitizeFunction && typeof sanitizeFunction === \"function\") {\n            return sanitizeFunction(unsafeHtml);\n        }\n        const domParser = new window.DOMParser();\n        const createdDocument = domParser.parseFromString(unsafeHtml, \"text/html\");\n        const elements = [].concat(...createdDocument.body.querySelectorAll(\"*\"));\n        for (const element of elements){\n            const elementName = element.nodeName.toLowerCase();\n            if (!Object.keys(allowList).includes(elementName)) {\n                element.remove();\n                continue;\n            }\n            const attributeList = [].concat(...element.attributes);\n            const allowedAttributes = [].concat(allowList[\"*\"] || [], allowList[elementName] || []);\n            for (const attribute of attributeList){\n                if (!allowedAttribute(attribute, allowedAttributes)) {\n                    element.removeAttribute(attribute.nodeName);\n                }\n            }\n        }\n        return createdDocument.body.innerHTML;\n    }\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap util/template-factory.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$5 = \"TemplateFactory\";\n    const Default$4 = {\n        allowList: DefaultAllowlist,\n        content: {},\n        // { selector : text ,  selector2 : text2 , }\n        extraClass: \"\",\n        html: false,\n        sanitize: true,\n        sanitizeFn: null,\n        template: \"<div></div>\"\n    };\n    const DefaultType$4 = {\n        allowList: \"object\",\n        content: \"object\",\n        extraClass: \"(string|function)\",\n        html: \"boolean\",\n        sanitize: \"boolean\",\n        sanitizeFn: \"(null|function)\",\n        template: \"string\"\n    };\n    const DefaultContentType = {\n        entry: \"(string|element|function|null)\",\n        selector: \"(string|element)\"\n    };\n    /**\n   * Class definition\n   */ class TemplateFactory extends Config {\n        constructor(config){\n            super();\n            this._config = this._getConfig(config);\n        }\n        // Getters\n        static get Default() {\n            return Default$4;\n        }\n        static get DefaultType() {\n            return DefaultType$4;\n        }\n        static get NAME() {\n            return NAME$5;\n        }\n        // Public\n        getContent() {\n            return Object.values(this._config.content).map((config)=>this._resolvePossibleFunction(config)).filter(Boolean);\n        }\n        hasContent() {\n            return this.getContent().length > 0;\n        }\n        changeContent(content) {\n            this._checkContent(content);\n            this._config.content = {\n                ...this._config.content,\n                ...content\n            };\n            return this;\n        }\n        toHtml() {\n            const templateWrapper = document.createElement(\"div\");\n            templateWrapper.innerHTML = this._maybeSanitize(this._config.template);\n            for (const [selector, text] of Object.entries(this._config.content)){\n                this._setContent(templateWrapper, text, selector);\n            }\n            const template = templateWrapper.children[0];\n            const extraClass = this._resolvePossibleFunction(this._config.extraClass);\n            if (extraClass) {\n                template.classList.add(...extraClass.split(\" \"));\n            }\n            return template;\n        }\n        // Private\n        _typeCheckConfig(config) {\n            super._typeCheckConfig(config);\n            this._checkContent(config.content);\n        }\n        _checkContent(arg) {\n            for (const [selector, content] of Object.entries(arg)){\n                super._typeCheckConfig({\n                    selector,\n                    entry: content\n                }, DefaultContentType);\n            }\n        }\n        _setContent(template, content, selector) {\n            const templateElement = SelectorEngine.findOne(selector, template);\n            if (!templateElement) {\n                return;\n            }\n            content = this._resolvePossibleFunction(content);\n            if (!content) {\n                templateElement.remove();\n                return;\n            }\n            if (isElement(content)) {\n                this._putElementInTemplate(getElement(content), templateElement);\n                return;\n            }\n            if (this._config.html) {\n                templateElement.innerHTML = this._maybeSanitize(content);\n                return;\n            }\n            templateElement.textContent = content;\n        }\n        _maybeSanitize(arg) {\n            return this._config.sanitize ? sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg;\n        }\n        _resolvePossibleFunction(arg) {\n            return execute(arg, [\n                this\n            ]);\n        }\n        _putElementInTemplate(element, templateElement) {\n            if (this._config.html) {\n                templateElement.innerHTML = \"\";\n                templateElement.append(element);\n                return;\n            }\n            templateElement.textContent = element.textContent;\n        }\n    }\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap tooltip.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$4 = \"tooltip\";\n    const DISALLOWED_ATTRIBUTES = new Set([\n        \"sanitize\",\n        \"allowList\",\n        \"sanitizeFn\"\n    ]);\n    const CLASS_NAME_FADE$2 = \"fade\";\n    const CLASS_NAME_MODAL = \"modal\";\n    const CLASS_NAME_SHOW$2 = \"show\";\n    const SELECTOR_TOOLTIP_INNER = \".tooltip-inner\";\n    const SELECTOR_MODAL = `.${CLASS_NAME_MODAL}`;\n    const EVENT_MODAL_HIDE = \"hide.bs.modal\";\n    const TRIGGER_HOVER = \"hover\";\n    const TRIGGER_FOCUS = \"focus\";\n    const TRIGGER_CLICK = \"click\";\n    const TRIGGER_MANUAL = \"manual\";\n    const EVENT_HIDE$2 = \"hide\";\n    const EVENT_HIDDEN$2 = \"hidden\";\n    const EVENT_SHOW$2 = \"show\";\n    const EVENT_SHOWN$2 = \"shown\";\n    const EVENT_INSERTED = \"inserted\";\n    const EVENT_CLICK$1 = \"click\";\n    const EVENT_FOCUSIN$1 = \"focusin\";\n    const EVENT_FOCUSOUT$1 = \"focusout\";\n    const EVENT_MOUSEENTER = \"mouseenter\";\n    const EVENT_MOUSELEAVE = \"mouseleave\";\n    const AttachmentMap = {\n        AUTO: \"auto\",\n        TOP: \"top\",\n        RIGHT: isRTL() ? \"left\" : \"right\",\n        BOTTOM: \"bottom\",\n        LEFT: isRTL() ? \"right\" : \"left\"\n    };\n    const Default$3 = {\n        allowList: DefaultAllowlist,\n        animation: true,\n        boundary: \"clippingParents\",\n        container: false,\n        customClass: \"\",\n        delay: 0,\n        fallbackPlacements: [\n            \"top\",\n            \"right\",\n            \"bottom\",\n            \"left\"\n        ],\n        html: false,\n        offset: [\n            0,\n            6\n        ],\n        placement: \"top\",\n        popperConfig: null,\n        sanitize: true,\n        sanitizeFn: null,\n        selector: false,\n        template: '<div class=\"tooltip\" role=\"tooltip\">' + '<div class=\"tooltip-arrow\"></div>' + '<div class=\"tooltip-inner\"></div>' + \"</div>\",\n        title: \"\",\n        trigger: \"hover focus\"\n    };\n    const DefaultType$3 = {\n        allowList: \"object\",\n        animation: \"boolean\",\n        boundary: \"(string|element)\",\n        container: \"(string|element|boolean)\",\n        customClass: \"(string|function)\",\n        delay: \"(number|object)\",\n        fallbackPlacements: \"array\",\n        html: \"boolean\",\n        offset: \"(array|string|function)\",\n        placement: \"(string|function)\",\n        popperConfig: \"(null|object|function)\",\n        sanitize: \"boolean\",\n        sanitizeFn: \"(null|function)\",\n        selector: \"(string|boolean)\",\n        template: \"string\",\n        title: \"(string|element|function)\",\n        trigger: \"string\"\n    };\n    /**\n   * Class definition\n   */ class Tooltip extends BaseComponent {\n        constructor(element, config){\n            if (typeof Popper__namespace === \"undefined\") {\n                throw new TypeError(\"Bootstrap's tooltips require Popper (https://popper.js.org)\");\n            }\n            super(element, config);\n            // Private\n            this._isEnabled = true;\n            this._timeout = 0;\n            this._isHovered = null;\n            this._activeTrigger = {};\n            this._popper = null;\n            this._templateFactory = null;\n            this._newContent = null;\n            // Protected\n            this.tip = null;\n            this._setListeners();\n            if (!this._config.selector) {\n                this._fixTitle();\n            }\n        }\n        // Getters\n        static get Default() {\n            return Default$3;\n        }\n        static get DefaultType() {\n            return DefaultType$3;\n        }\n        static get NAME() {\n            return NAME$4;\n        }\n        // Public\n        enable() {\n            this._isEnabled = true;\n        }\n        disable() {\n            this._isEnabled = false;\n        }\n        toggleEnabled() {\n            this._isEnabled = !this._isEnabled;\n        }\n        toggle() {\n            if (!this._isEnabled) {\n                return;\n            }\n            this._activeTrigger.click = !this._activeTrigger.click;\n            if (this._isShown()) {\n                this._leave();\n                return;\n            }\n            this._enter();\n        }\n        dispose() {\n            clearTimeout(this._timeout);\n            EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);\n            if (this._element.getAttribute(\"data-bs-original-title\")) {\n                this._element.setAttribute(\"title\", this._element.getAttribute(\"data-bs-original-title\"));\n            }\n            this._disposePopper();\n            super.dispose();\n        }\n        show() {\n            if (this._element.style.display === \"none\") {\n                throw new Error(\"Please use show on visible elements\");\n            }\n            if (!(this._isWithContent() && this._isEnabled)) {\n                return;\n            }\n            const showEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOW$2));\n            const shadowRoot = findShadowRoot(this._element);\n            const isInTheDom = (shadowRoot || this._element.ownerDocument.documentElement).contains(this._element);\n            if (showEvent.defaultPrevented || !isInTheDom) {\n                return;\n            }\n            // TODO: v6 remove this or make it optional\n            this._disposePopper();\n            const tip = this._getTipElement();\n            this._element.setAttribute(\"aria-describedby\", tip.getAttribute(\"id\"));\n            const { container } = this._config;\n            if (!this._element.ownerDocument.documentElement.contains(this.tip)) {\n                container.append(tip);\n                EventHandler.trigger(this._element, this.constructor.eventName(EVENT_INSERTED));\n            }\n            this._popper = this._createPopper(tip);\n            tip.classList.add(CLASS_NAME_SHOW$2);\n            // If this is a touch-enabled device we add extra\n            // empty mouseover listeners to the body's immediate children;\n            // only needed because of broken event delegation on iOS\n            // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n            if (\"ontouchstart\" in document.documentElement) {\n                for (const element of [].concat(...document.body.children)){\n                    EventHandler.on(element, \"mouseover\", noop);\n                }\n            }\n            const complete = ()=>{\n                EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOWN$2));\n                if (this._isHovered === false) {\n                    this._leave();\n                }\n                this._isHovered = false;\n            };\n            this._queueCallback(complete, this.tip, this._isAnimated());\n        }\n        hide() {\n            if (!this._isShown()) {\n                return;\n            }\n            const hideEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDE$2));\n            if (hideEvent.defaultPrevented) {\n                return;\n            }\n            const tip = this._getTipElement();\n            tip.classList.remove(CLASS_NAME_SHOW$2);\n            // If this is a touch-enabled device we remove the extra\n            // empty mouseover listeners we added for iOS support\n            if (\"ontouchstart\" in document.documentElement) {\n                for (const element of [].concat(...document.body.children)){\n                    EventHandler.off(element, \"mouseover\", noop);\n                }\n            }\n            this._activeTrigger[TRIGGER_CLICK] = false;\n            this._activeTrigger[TRIGGER_FOCUS] = false;\n            this._activeTrigger[TRIGGER_HOVER] = false;\n            this._isHovered = null; // it is a trick to support manual triggering\n            const complete = ()=>{\n                if (this._isWithActiveTrigger()) {\n                    return;\n                }\n                if (!this._isHovered) {\n                    this._disposePopper();\n                }\n                this._element.removeAttribute(\"aria-describedby\");\n                EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDDEN$2));\n            };\n            this._queueCallback(complete, this.tip, this._isAnimated());\n        }\n        update() {\n            if (this._popper) {\n                this._popper.update();\n            }\n        }\n        // Protected\n        _isWithContent() {\n            return Boolean(this._getTitle());\n        }\n        _getTipElement() {\n            if (!this.tip) {\n                this.tip = this._createTipElement(this._newContent || this._getContentForTemplate());\n            }\n            return this.tip;\n        }\n        _createTipElement(content) {\n            const tip = this._getTemplateFactory(content).toHtml();\n            // TODO: remove this check in v6\n            if (!tip) {\n                return null;\n            }\n            tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2);\n            // TODO: v6 the following can be achieved with CSS only\n            tip.classList.add(`bs-${this.constructor.NAME}-auto`);\n            const tipId = getUID(this.constructor.NAME).toString();\n            tip.setAttribute(\"id\", tipId);\n            if (this._isAnimated()) {\n                tip.classList.add(CLASS_NAME_FADE$2);\n            }\n            return tip;\n        }\n        setContent(content) {\n            this._newContent = content;\n            if (this._isShown()) {\n                this._disposePopper();\n                this.show();\n            }\n        }\n        _getTemplateFactory(content) {\n            if (this._templateFactory) {\n                this._templateFactory.changeContent(content);\n            } else {\n                this._templateFactory = new TemplateFactory({\n                    ...this._config,\n                    // the `content` var has to be after `this._config`\n                    // to override config.content in case of popover\n                    content,\n                    extraClass: this._resolvePossibleFunction(this._config.customClass)\n                });\n            }\n            return this._templateFactory;\n        }\n        _getContentForTemplate() {\n            return {\n                [SELECTOR_TOOLTIP_INNER]: this._getTitle()\n            };\n        }\n        _getTitle() {\n            return this._resolvePossibleFunction(this._config.title) || this._element.getAttribute(\"data-bs-original-title\");\n        }\n        // Private\n        _initializeOnDelegatedTarget(event) {\n            return this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());\n        }\n        _isAnimated() {\n            return this._config.animation || this.tip && this.tip.classList.contains(CLASS_NAME_FADE$2);\n        }\n        _isShown() {\n            return this.tip && this.tip.classList.contains(CLASS_NAME_SHOW$2);\n        }\n        _createPopper(tip) {\n            const placement = execute(this._config.placement, [\n                this,\n                tip,\n                this._element\n            ]);\n            const attachment = AttachmentMap[placement.toUpperCase()];\n            return Popper__namespace.createPopper(this._element, tip, this._getPopperConfig(attachment));\n        }\n        _getOffset() {\n            const { offset } = this._config;\n            if (typeof offset === \"string\") {\n                return offset.split(\",\").map((value)=>Number.parseInt(value, 10));\n            }\n            if (typeof offset === \"function\") {\n                return (popperData)=>offset(popperData, this._element);\n            }\n            return offset;\n        }\n        _resolvePossibleFunction(arg) {\n            return execute(arg, [\n                this._element\n            ]);\n        }\n        _getPopperConfig(attachment) {\n            const defaultBsPopperConfig = {\n                placement: attachment,\n                modifiers: [\n                    {\n                        name: \"flip\",\n                        options: {\n                            fallbackPlacements: this._config.fallbackPlacements\n                        }\n                    },\n                    {\n                        name: \"offset\",\n                        options: {\n                            offset: this._getOffset()\n                        }\n                    },\n                    {\n                        name: \"preventOverflow\",\n                        options: {\n                            boundary: this._config.boundary\n                        }\n                    },\n                    {\n                        name: \"arrow\",\n                        options: {\n                            element: `.${this.constructor.NAME}-arrow`\n                        }\n                    },\n                    {\n                        name: \"preSetPlacement\",\n                        enabled: true,\n                        phase: \"beforeMain\",\n                        fn: (data)=>{\n                            // Pre-set Popper's placement attribute in order to read the arrow sizes properly.\n                            // Otherwise, Popper mixes up the width and height dimensions since the initial arrow style is for top placement\n                            this._getTipElement().setAttribute(\"data-popper-placement\", data.state.placement);\n                        }\n                    }\n                ]\n            };\n            return {\n                ...defaultBsPopperConfig,\n                ...execute(this._config.popperConfig, [\n                    defaultBsPopperConfig\n                ])\n            };\n        }\n        _setListeners() {\n            const triggers = this._config.trigger.split(\" \");\n            for (const trigger of triggers){\n                if (trigger === \"click\") {\n                    EventHandler.on(this._element, this.constructor.eventName(EVENT_CLICK$1), this._config.selector, (event)=>{\n                        const context = this._initializeOnDelegatedTarget(event);\n                        context.toggle();\n                    });\n                } else if (trigger !== TRIGGER_MANUAL) {\n                    const eventIn = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSEENTER) : this.constructor.eventName(EVENT_FOCUSIN$1);\n                    const eventOut = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSELEAVE) : this.constructor.eventName(EVENT_FOCUSOUT$1);\n                    EventHandler.on(this._element, eventIn, this._config.selector, (event)=>{\n                        const context = this._initializeOnDelegatedTarget(event);\n                        context._activeTrigger[event.type === \"focusin\" ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;\n                        context._enter();\n                    });\n                    EventHandler.on(this._element, eventOut, this._config.selector, (event)=>{\n                        const context = this._initializeOnDelegatedTarget(event);\n                        context._activeTrigger[event.type === \"focusout\" ? TRIGGER_FOCUS : TRIGGER_HOVER] = context._element.contains(event.relatedTarget);\n                        context._leave();\n                    });\n                }\n            }\n            this._hideModalHandler = ()=>{\n                if (this._element) {\n                    this.hide();\n                }\n            };\n            EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);\n        }\n        _fixTitle() {\n            const title = this._element.getAttribute(\"title\");\n            if (!title) {\n                return;\n            }\n            if (!this._element.getAttribute(\"aria-label\") && !this._element.textContent.trim()) {\n                this._element.setAttribute(\"aria-label\", title);\n            }\n            this._element.setAttribute(\"data-bs-original-title\", title); // DO NOT USE IT. Is only for backwards compatibility\n            this._element.removeAttribute(\"title\");\n        }\n        _enter() {\n            if (this._isShown() || this._isHovered) {\n                this._isHovered = true;\n                return;\n            }\n            this._isHovered = true;\n            this._setTimeout(()=>{\n                if (this._isHovered) {\n                    this.show();\n                }\n            }, this._config.delay.show);\n        }\n        _leave() {\n            if (this._isWithActiveTrigger()) {\n                return;\n            }\n            this._isHovered = false;\n            this._setTimeout(()=>{\n                if (!this._isHovered) {\n                    this.hide();\n                }\n            }, this._config.delay.hide);\n        }\n        _setTimeout(handler, timeout) {\n            clearTimeout(this._timeout);\n            this._timeout = setTimeout(handler, timeout);\n        }\n        _isWithActiveTrigger() {\n            return Object.values(this._activeTrigger).includes(true);\n        }\n        _getConfig(config) {\n            const dataAttributes = Manipulator.getDataAttributes(this._element);\n            for (const dataAttribute of Object.keys(dataAttributes)){\n                if (DISALLOWED_ATTRIBUTES.has(dataAttribute)) {\n                    delete dataAttributes[dataAttribute];\n                }\n            }\n            config = {\n                ...dataAttributes,\n                ...typeof config === \"object\" && config ? config : {}\n            };\n            config = this._mergeConfigObj(config);\n            config = this._configAfterMerge(config);\n            this._typeCheckConfig(config);\n            return config;\n        }\n        _configAfterMerge(config) {\n            config.container = config.container === false ? document.body : getElement(config.container);\n            if (typeof config.delay === \"number\") {\n                config.delay = {\n                    show: config.delay,\n                    hide: config.delay\n                };\n            }\n            if (typeof config.title === \"number\") {\n                config.title = config.title.toString();\n            }\n            if (typeof config.content === \"number\") {\n                config.content = config.content.toString();\n            }\n            return config;\n        }\n        _getDelegateConfig() {\n            const config = {};\n            for (const [key, value] of Object.entries(this._config)){\n                if (this.constructor.Default[key] !== value) {\n                    config[key] = value;\n                }\n            }\n            config.selector = false;\n            config.trigger = \"manual\";\n            // In the future can be replaced with:\n            // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])\n            // `Object.fromEntries(keysWithDifferentValues)`\n            return config;\n        }\n        _disposePopper() {\n            if (this._popper) {\n                this._popper.destroy();\n                this._popper = null;\n            }\n            if (this.tip) {\n                this.tip.remove();\n                this.tip = null;\n            }\n        }\n        // Static\n        static jQueryInterface(config) {\n            return this.each(function() {\n                const data = Tooltip.getOrCreateInstance(this, config);\n                if (typeof config !== \"string\") {\n                    return;\n                }\n                if (typeof data[config] === \"undefined\") {\n                    throw new TypeError(`No method named \"${config}\"`);\n                }\n                data[config]();\n            });\n        }\n    }\n    /**\n   * jQuery\n   */ defineJQueryPlugin(Tooltip);\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap popover.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$3 = \"popover\";\n    const SELECTOR_TITLE = \".popover-header\";\n    const SELECTOR_CONTENT = \".popover-body\";\n    const Default$2 = {\n        ...Tooltip.Default,\n        content: \"\",\n        offset: [\n            0,\n            8\n        ],\n        placement: \"right\",\n        template: '<div class=\"popover\" role=\"tooltip\">' + '<div class=\"popover-arrow\"></div>' + '<h3 class=\"popover-header\"></h3>' + '<div class=\"popover-body\"></div>' + \"</div>\",\n        trigger: \"click\"\n    };\n    const DefaultType$2 = {\n        ...Tooltip.DefaultType,\n        content: \"(null|string|element|function)\"\n    };\n    /**\n   * Class definition\n   */ class Popover extends Tooltip {\n        // Getters\n        static get Default() {\n            return Default$2;\n        }\n        static get DefaultType() {\n            return DefaultType$2;\n        }\n        static get NAME() {\n            return NAME$3;\n        }\n        // Overrides\n        _isWithContent() {\n            return this._getTitle() || this._getContent();\n        }\n        // Private\n        _getContentForTemplate() {\n            return {\n                [SELECTOR_TITLE]: this._getTitle(),\n                [SELECTOR_CONTENT]: this._getContent()\n            };\n        }\n        _getContent() {\n            return this._resolvePossibleFunction(this._config.content);\n        }\n        // Static\n        static jQueryInterface(config) {\n            return this.each(function() {\n                const data = Popover.getOrCreateInstance(this, config);\n                if (typeof config !== \"string\") {\n                    return;\n                }\n                if (typeof data[config] === \"undefined\") {\n                    throw new TypeError(`No method named \"${config}\"`);\n                }\n                data[config]();\n            });\n        }\n    }\n    /**\n   * jQuery\n   */ defineJQueryPlugin(Popover);\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap scrollspy.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$2 = \"scrollspy\";\n    const DATA_KEY$2 = \"bs.scrollspy\";\n    const EVENT_KEY$2 = `.${DATA_KEY$2}`;\n    const DATA_API_KEY = \".data-api\";\n    const EVENT_ACTIVATE = `activate${EVENT_KEY$2}`;\n    const EVENT_CLICK = `click${EVENT_KEY$2}`;\n    const EVENT_LOAD_DATA_API$1 = `load${EVENT_KEY$2}${DATA_API_KEY}`;\n    const CLASS_NAME_DROPDOWN_ITEM = \"dropdown-item\";\n    const CLASS_NAME_ACTIVE$1 = \"active\";\n    const SELECTOR_DATA_SPY = '[data-bs-spy=\"scroll\"]';\n    const SELECTOR_TARGET_LINKS = \"[href]\";\n    const SELECTOR_NAV_LIST_GROUP = \".nav, .list-group\";\n    const SELECTOR_NAV_LINKS = \".nav-link\";\n    const SELECTOR_NAV_ITEMS = \".nav-item\";\n    const SELECTOR_LIST_ITEMS = \".list-group-item\";\n    const SELECTOR_LINK_ITEMS = `${SELECTOR_NAV_LINKS}, ${SELECTOR_NAV_ITEMS} > ${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}`;\n    const SELECTOR_DROPDOWN = \".dropdown\";\n    const SELECTOR_DROPDOWN_TOGGLE$1 = \".dropdown-toggle\";\n    const Default$1 = {\n        offset: null,\n        // TODO: v6 @deprecated, keep it for backwards compatibility reasons\n        rootMargin: \"0px 0px -25%\",\n        smoothScroll: false,\n        target: null,\n        threshold: [\n            0.1,\n            0.5,\n            1\n        ]\n    };\n    const DefaultType$1 = {\n        offset: \"(number|null)\",\n        // TODO v6 @deprecated, keep it for backwards compatibility reasons\n        rootMargin: \"string\",\n        smoothScroll: \"boolean\",\n        target: \"element\",\n        threshold: \"array\"\n    };\n    /**\n   * Class definition\n   */ class ScrollSpy extends BaseComponent {\n        constructor(element, config){\n            super(element, config);\n            // this._element is the observablesContainer and config.target the menu links wrapper\n            this._targetLinks = new Map();\n            this._observableSections = new Map();\n            this._rootElement = getComputedStyle(this._element).overflowY === \"visible\" ? null : this._element;\n            this._activeTarget = null;\n            this._observer = null;\n            this._previousScrollData = {\n                visibleEntryTop: 0,\n                parentScrollTop: 0\n            };\n            this.refresh(); // initialize\n        }\n        // Getters\n        static get Default() {\n            return Default$1;\n        }\n        static get DefaultType() {\n            return DefaultType$1;\n        }\n        static get NAME() {\n            return NAME$2;\n        }\n        // Public\n        refresh() {\n            this._initializeTargetsAndObservables();\n            this._maybeEnableSmoothScroll();\n            if (this._observer) {\n                this._observer.disconnect();\n            } else {\n                this._observer = this._getNewObserver();\n            }\n            for (const section of this._observableSections.values()){\n                this._observer.observe(section);\n            }\n        }\n        dispose() {\n            this._observer.disconnect();\n            super.dispose();\n        }\n        // Private\n        _configAfterMerge(config) {\n            // TODO: on v6 target should be given explicitly & remove the {target: 'ss-target'} case\n            config.target = getElement(config.target) || document.body;\n            // TODO: v6 Only for backwards compatibility reasons. Use rootMargin only\n            config.rootMargin = config.offset ? `${config.offset}px 0px -30%` : config.rootMargin;\n            if (typeof config.threshold === \"string\") {\n                config.threshold = config.threshold.split(\",\").map((value)=>Number.parseFloat(value));\n            }\n            return config;\n        }\n        _maybeEnableSmoothScroll() {\n            if (!this._config.smoothScroll) {\n                return;\n            }\n            // unregister any previous listeners\n            EventHandler.off(this._config.target, EVENT_CLICK);\n            EventHandler.on(this._config.target, EVENT_CLICK, SELECTOR_TARGET_LINKS, (event)=>{\n                const observableSection = this._observableSections.get(event.target.hash);\n                if (observableSection) {\n                    event.preventDefault();\n                    const root = this._rootElement || window;\n                    const height = observableSection.offsetTop - this._element.offsetTop;\n                    if (root.scrollTo) {\n                        root.scrollTo({\n                            top: height,\n                            behavior: \"smooth\"\n                        });\n                        return;\n                    }\n                    // Chrome 60 doesn't support `scrollTo`\n                    root.scrollTop = height;\n                }\n            });\n        }\n        _getNewObserver() {\n            const options = {\n                root: this._rootElement,\n                threshold: this._config.threshold,\n                rootMargin: this._config.rootMargin\n            };\n            return new IntersectionObserver((entries)=>this._observerCallback(entries), options);\n        }\n        // The logic of selection\n        _observerCallback(entries) {\n            const targetElement = (entry)=>this._targetLinks.get(`#${entry.target.id}`);\n            const activate = (entry)=>{\n                this._previousScrollData.visibleEntryTop = entry.target.offsetTop;\n                this._process(targetElement(entry));\n            };\n            const parentScrollTop = (this._rootElement || document.documentElement).scrollTop;\n            const userScrollsDown = parentScrollTop >= this._previousScrollData.parentScrollTop;\n            this._previousScrollData.parentScrollTop = parentScrollTop;\n            for (const entry of entries){\n                if (!entry.isIntersecting) {\n                    this._activeTarget = null;\n                    this._clearActiveClass(targetElement(entry));\n                    continue;\n                }\n                const entryIsLowerThanPrevious = entry.target.offsetTop >= this._previousScrollData.visibleEntryTop;\n                // if we are scrolling down, pick the bigger offsetTop\n                if (userScrollsDown && entryIsLowerThanPrevious) {\n                    activate(entry);\n                    // if parent isn't scrolled, let's keep the first visible item, breaking the iteration\n                    if (!parentScrollTop) {\n                        return;\n                    }\n                    continue;\n                }\n                // if we are scrolling up, pick the smallest offsetTop\n                if (!userScrollsDown && !entryIsLowerThanPrevious) {\n                    activate(entry);\n                }\n            }\n        }\n        _initializeTargetsAndObservables() {\n            this._targetLinks = new Map();\n            this._observableSections = new Map();\n            const targetLinks = SelectorEngine.find(SELECTOR_TARGET_LINKS, this._config.target);\n            for (const anchor of targetLinks){\n                // ensure that the anchor has an id and is not disabled\n                if (!anchor.hash || isDisabled(anchor)) {\n                    continue;\n                }\n                const observableSection = SelectorEngine.findOne(decodeURI(anchor.hash), this._element);\n                // ensure that the observableSection exists & is visible\n                if (isVisible(observableSection)) {\n                    this._targetLinks.set(decodeURI(anchor.hash), anchor);\n                    this._observableSections.set(anchor.hash, observableSection);\n                }\n            }\n        }\n        _process(target) {\n            if (this._activeTarget === target) {\n                return;\n            }\n            this._clearActiveClass(this._config.target);\n            this._activeTarget = target;\n            target.classList.add(CLASS_NAME_ACTIVE$1);\n            this._activateParents(target);\n            EventHandler.trigger(this._element, EVENT_ACTIVATE, {\n                relatedTarget: target\n            });\n        }\n        _activateParents(target) {\n            // Activate dropdown parents\n            if (target.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {\n                SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, target.closest(SELECTOR_DROPDOWN)).classList.add(CLASS_NAME_ACTIVE$1);\n                return;\n            }\n            for (const listGroup of SelectorEngine.parents(target, SELECTOR_NAV_LIST_GROUP)){\n                // Set triggered links parents as active\n                // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor\n                for (const item of SelectorEngine.prev(listGroup, SELECTOR_LINK_ITEMS)){\n                    item.classList.add(CLASS_NAME_ACTIVE$1);\n                }\n            }\n        }\n        _clearActiveClass(parent) {\n            parent.classList.remove(CLASS_NAME_ACTIVE$1);\n            const activeNodes = SelectorEngine.find(`${SELECTOR_TARGET_LINKS}.${CLASS_NAME_ACTIVE$1}`, parent);\n            for (const node of activeNodes){\n                node.classList.remove(CLASS_NAME_ACTIVE$1);\n            }\n        }\n        // Static\n        static jQueryInterface(config) {\n            return this.each(function() {\n                const data = ScrollSpy.getOrCreateInstance(this, config);\n                if (typeof config !== \"string\") {\n                    return;\n                }\n                if (data[config] === undefined || config.startsWith(\"_\") || config === \"constructor\") {\n                    throw new TypeError(`No method named \"${config}\"`);\n                }\n                data[config]();\n            });\n        }\n    }\n    /**\n   * Data API implementation\n   */ EventHandler.on(window, EVENT_LOAD_DATA_API$1, ()=>{\n        for (const spy of SelectorEngine.find(SELECTOR_DATA_SPY)){\n            ScrollSpy.getOrCreateInstance(spy);\n        }\n    });\n    /**\n   * jQuery\n   */ defineJQueryPlugin(ScrollSpy);\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap tab.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$1 = \"tab\";\n    const DATA_KEY$1 = \"bs.tab\";\n    const EVENT_KEY$1 = `.${DATA_KEY$1}`;\n    const EVENT_HIDE$1 = `hide${EVENT_KEY$1}`;\n    const EVENT_HIDDEN$1 = `hidden${EVENT_KEY$1}`;\n    const EVENT_SHOW$1 = `show${EVENT_KEY$1}`;\n    const EVENT_SHOWN$1 = `shown${EVENT_KEY$1}`;\n    const EVENT_CLICK_DATA_API = `click${EVENT_KEY$1}`;\n    const EVENT_KEYDOWN = `keydown${EVENT_KEY$1}`;\n    const EVENT_LOAD_DATA_API = `load${EVENT_KEY$1}`;\n    const ARROW_LEFT_KEY = \"ArrowLeft\";\n    const ARROW_RIGHT_KEY = \"ArrowRight\";\n    const ARROW_UP_KEY = \"ArrowUp\";\n    const ARROW_DOWN_KEY = \"ArrowDown\";\n    const HOME_KEY = \"Home\";\n    const END_KEY = \"End\";\n    const CLASS_NAME_ACTIVE = \"active\";\n    const CLASS_NAME_FADE$1 = \"fade\";\n    const CLASS_NAME_SHOW$1 = \"show\";\n    const CLASS_DROPDOWN = \"dropdown\";\n    const SELECTOR_DROPDOWN_TOGGLE = \".dropdown-toggle\";\n    const SELECTOR_DROPDOWN_MENU = \".dropdown-menu\";\n    const NOT_SELECTOR_DROPDOWN_TOGGLE = `:not(${SELECTOR_DROPDOWN_TOGGLE})`;\n    const SELECTOR_TAB_PANEL = '.list-group, .nav, [role=\"tablist\"]';\n    const SELECTOR_OUTER = \".nav-item, .list-group-item\";\n    const SELECTOR_INNER = `.nav-link${NOT_SELECTOR_DROPDOWN_TOGGLE}, .list-group-item${NOT_SELECTOR_DROPDOWN_TOGGLE}, [role=\"tab\"]${NOT_SELECTOR_DROPDOWN_TOGGLE}`;\n    const SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"tab\"], [data-bs-toggle=\"pill\"], [data-bs-toggle=\"list\"]'; // TODO: could only be `tab` in v6\n    const SELECTOR_INNER_ELEM = `${SELECTOR_INNER}, ${SELECTOR_DATA_TOGGLE}`;\n    const SELECTOR_DATA_TOGGLE_ACTIVE = `.${CLASS_NAME_ACTIVE}[data-bs-toggle=\"tab\"], .${CLASS_NAME_ACTIVE}[data-bs-toggle=\"pill\"], .${CLASS_NAME_ACTIVE}[data-bs-toggle=\"list\"]`;\n    /**\n   * Class definition\n   */ class Tab extends BaseComponent {\n        constructor(element){\n            super(element);\n            this._parent = this._element.closest(SELECTOR_TAB_PANEL);\n            if (!this._parent) {\n                return;\n            // TODO: should throw exception in v6\n            // throw new TypeError(`${element.outerHTML} has not a valid parent ${SELECTOR_INNER_ELEM}`)\n            }\n            // Set up initial aria attributes\n            this._setInitialAttributes(this._parent, this._getChildren());\n            EventHandler.on(this._element, EVENT_KEYDOWN, (event)=>this._keydown(event));\n        }\n        // Getters\n        static get NAME() {\n            return NAME$1;\n        }\n        // Public\n        show() {\n            // Shows this elem and deactivate the active sibling if exists\n            const innerElem = this._element;\n            if (this._elemIsActive(innerElem)) {\n                return;\n            }\n            // Search for active tab on same parent to deactivate it\n            const active = this._getActiveElem();\n            const hideEvent = active ? EventHandler.trigger(active, EVENT_HIDE$1, {\n                relatedTarget: innerElem\n            }) : null;\n            const showEvent = EventHandler.trigger(innerElem, EVENT_SHOW$1, {\n                relatedTarget: active\n            });\n            if (showEvent.defaultPrevented || hideEvent && hideEvent.defaultPrevented) {\n                return;\n            }\n            this._deactivate(active, innerElem);\n            this._activate(innerElem, active);\n        }\n        // Private\n        _activate(element, relatedElem) {\n            if (!element) {\n                return;\n            }\n            element.classList.add(CLASS_NAME_ACTIVE);\n            this._activate(SelectorEngine.getElementFromSelector(element)); // Search and activate/show the proper section\n            const complete = ()=>{\n                if (element.getAttribute(\"role\") !== \"tab\") {\n                    element.classList.add(CLASS_NAME_SHOW$1);\n                    return;\n                }\n                element.removeAttribute(\"tabindex\");\n                element.setAttribute(\"aria-selected\", true);\n                this._toggleDropDown(element, true);\n                EventHandler.trigger(element, EVENT_SHOWN$1, {\n                    relatedTarget: relatedElem\n                });\n            };\n            this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));\n        }\n        _deactivate(element, relatedElem) {\n            if (!element) {\n                return;\n            }\n            element.classList.remove(CLASS_NAME_ACTIVE);\n            element.blur();\n            this._deactivate(SelectorEngine.getElementFromSelector(element)); // Search and deactivate the shown section too\n            const complete = ()=>{\n                if (element.getAttribute(\"role\") !== \"tab\") {\n                    element.classList.remove(CLASS_NAME_SHOW$1);\n                    return;\n                }\n                element.setAttribute(\"aria-selected\", false);\n                element.setAttribute(\"tabindex\", \"-1\");\n                this._toggleDropDown(element, false);\n                EventHandler.trigger(element, EVENT_HIDDEN$1, {\n                    relatedTarget: relatedElem\n                });\n            };\n            this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));\n        }\n        _keydown(event) {\n            if (![\n                ARROW_LEFT_KEY,\n                ARROW_RIGHT_KEY,\n                ARROW_UP_KEY,\n                ARROW_DOWN_KEY,\n                HOME_KEY,\n                END_KEY\n            ].includes(event.key)) {\n                return;\n            }\n            event.stopPropagation(); // stopPropagation/preventDefault both added to support up/down keys without scrolling the page\n            event.preventDefault();\n            const children = this._getChildren().filter((element)=>!isDisabled(element));\n            let nextActiveElement;\n            if ([\n                HOME_KEY,\n                END_KEY\n            ].includes(event.key)) {\n                nextActiveElement = children[event.key === HOME_KEY ? 0 : children.length - 1];\n            } else {\n                const isNext = [\n                    ARROW_RIGHT_KEY,\n                    ARROW_DOWN_KEY\n                ].includes(event.key);\n                nextActiveElement = getNextActiveElement(children, event.target, isNext, true);\n            }\n            if (nextActiveElement) {\n                nextActiveElement.focus({\n                    preventScroll: true\n                });\n                Tab.getOrCreateInstance(nextActiveElement).show();\n            }\n        }\n        _getChildren() {\n            // collection of inner elements\n            return SelectorEngine.find(SELECTOR_INNER_ELEM, this._parent);\n        }\n        _getActiveElem() {\n            return this._getChildren().find((child)=>this._elemIsActive(child)) || null;\n        }\n        _setInitialAttributes(parent, children) {\n            this._setAttributeIfNotExists(parent, \"role\", \"tablist\");\n            for (const child of children){\n                this._setInitialAttributesOnChild(child);\n            }\n        }\n        _setInitialAttributesOnChild(child) {\n            child = this._getInnerElement(child);\n            const isActive = this._elemIsActive(child);\n            const outerElem = this._getOuterElement(child);\n            child.setAttribute(\"aria-selected\", isActive);\n            if (outerElem !== child) {\n                this._setAttributeIfNotExists(outerElem, \"role\", \"presentation\");\n            }\n            if (!isActive) {\n                child.setAttribute(\"tabindex\", \"-1\");\n            }\n            this._setAttributeIfNotExists(child, \"role\", \"tab\");\n            // set attributes to the related panel too\n            this._setInitialAttributesOnTargetPanel(child);\n        }\n        _setInitialAttributesOnTargetPanel(child) {\n            const target = SelectorEngine.getElementFromSelector(child);\n            if (!target) {\n                return;\n            }\n            this._setAttributeIfNotExists(target, \"role\", \"tabpanel\");\n            if (child.id) {\n                this._setAttributeIfNotExists(target, \"aria-labelledby\", `${child.id}`);\n            }\n        }\n        _toggleDropDown(element, open) {\n            const outerElem = this._getOuterElement(element);\n            if (!outerElem.classList.contains(CLASS_DROPDOWN)) {\n                return;\n            }\n            const toggle = (selector, className)=>{\n                const element = SelectorEngine.findOne(selector, outerElem);\n                if (element) {\n                    element.classList.toggle(className, open);\n                }\n            };\n            toggle(SELECTOR_DROPDOWN_TOGGLE, CLASS_NAME_ACTIVE);\n            toggle(SELECTOR_DROPDOWN_MENU, CLASS_NAME_SHOW$1);\n            outerElem.setAttribute(\"aria-expanded\", open);\n        }\n        _setAttributeIfNotExists(element, attribute, value) {\n            if (!element.hasAttribute(attribute)) {\n                element.setAttribute(attribute, value);\n            }\n        }\n        _elemIsActive(elem) {\n            return elem.classList.contains(CLASS_NAME_ACTIVE);\n        }\n        // Try to get the inner element (usually the .nav-link)\n        _getInnerElement(elem) {\n            return elem.matches(SELECTOR_INNER_ELEM) ? elem : SelectorEngine.findOne(SELECTOR_INNER_ELEM, elem);\n        }\n        // Try to get the outer element (usually the .nav-item)\n        _getOuterElement(elem) {\n            return elem.closest(SELECTOR_OUTER) || elem;\n        }\n        // Static\n        static jQueryInterface(config) {\n            return this.each(function() {\n                const data = Tab.getOrCreateInstance(this);\n                if (typeof config !== \"string\") {\n                    return;\n                }\n                if (data[config] === undefined || config.startsWith(\"_\") || config === \"constructor\") {\n                    throw new TypeError(`No method named \"${config}\"`);\n                }\n                data[config]();\n            });\n        }\n    }\n    /**\n   * Data API implementation\n   */ EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function(event) {\n        if ([\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName)) {\n            event.preventDefault();\n        }\n        if (isDisabled(this)) {\n            return;\n        }\n        Tab.getOrCreateInstance(this).show();\n    });\n    /**\n   * Initialize on focus\n   */ EventHandler.on(window, EVENT_LOAD_DATA_API, ()=>{\n        for (const element of SelectorEngine.find(SELECTOR_DATA_TOGGLE_ACTIVE)){\n            Tab.getOrCreateInstance(element);\n        }\n    });\n    /**\n   * jQuery\n   */ defineJQueryPlugin(Tab);\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap toast.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME = \"toast\";\n    const DATA_KEY = \"bs.toast\";\n    const EVENT_KEY = `.${DATA_KEY}`;\n    const EVENT_MOUSEOVER = `mouseover${EVENT_KEY}`;\n    const EVENT_MOUSEOUT = `mouseout${EVENT_KEY}`;\n    const EVENT_FOCUSIN = `focusin${EVENT_KEY}`;\n    const EVENT_FOCUSOUT = `focusout${EVENT_KEY}`;\n    const EVENT_HIDE = `hide${EVENT_KEY}`;\n    const EVENT_HIDDEN = `hidden${EVENT_KEY}`;\n    const EVENT_SHOW = `show${EVENT_KEY}`;\n    const EVENT_SHOWN = `shown${EVENT_KEY}`;\n    const CLASS_NAME_FADE = \"fade\";\n    const CLASS_NAME_HIDE = \"hide\"; // @deprecated - kept here only for backwards compatibility\n    const CLASS_NAME_SHOW = \"show\";\n    const CLASS_NAME_SHOWING = \"showing\";\n    const DefaultType = {\n        animation: \"boolean\",\n        autohide: \"boolean\",\n        delay: \"number\"\n    };\n    const Default = {\n        animation: true,\n        autohide: true,\n        delay: 5000\n    };\n    /**\n   * Class definition\n   */ class Toast extends BaseComponent {\n        constructor(element, config){\n            super(element, config);\n            this._timeout = null;\n            this._hasMouseInteraction = false;\n            this._hasKeyboardInteraction = false;\n            this._setListeners();\n        }\n        // Getters\n        static get Default() {\n            return Default;\n        }\n        static get DefaultType() {\n            return DefaultType;\n        }\n        static get NAME() {\n            return NAME;\n        }\n        // Public\n        show() {\n            const showEvent = EventHandler.trigger(this._element, EVENT_SHOW);\n            if (showEvent.defaultPrevented) {\n                return;\n            }\n            this._clearTimeout();\n            if (this._config.animation) {\n                this._element.classList.add(CLASS_NAME_FADE);\n            }\n            const complete = ()=>{\n                this._element.classList.remove(CLASS_NAME_SHOWING);\n                EventHandler.trigger(this._element, EVENT_SHOWN);\n                this._maybeScheduleHide();\n            };\n            this._element.classList.remove(CLASS_NAME_HIDE); // @deprecated\n            reflow(this._element);\n            this._element.classList.add(CLASS_NAME_SHOW, CLASS_NAME_SHOWING);\n            this._queueCallback(complete, this._element, this._config.animation);\n        }\n        hide() {\n            if (!this.isShown()) {\n                return;\n            }\n            const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);\n            if (hideEvent.defaultPrevented) {\n                return;\n            }\n            const complete = ()=>{\n                this._element.classList.add(CLASS_NAME_HIDE); // @deprecated\n                this._element.classList.remove(CLASS_NAME_SHOWING, CLASS_NAME_SHOW);\n                EventHandler.trigger(this._element, EVENT_HIDDEN);\n            };\n            this._element.classList.add(CLASS_NAME_SHOWING);\n            this._queueCallback(complete, this._element, this._config.animation);\n        }\n        dispose() {\n            this._clearTimeout();\n            if (this.isShown()) {\n                this._element.classList.remove(CLASS_NAME_SHOW);\n            }\n            super.dispose();\n        }\n        isShown() {\n            return this._element.classList.contains(CLASS_NAME_SHOW);\n        }\n        // Private\n        _maybeScheduleHide() {\n            if (!this._config.autohide) {\n                return;\n            }\n            if (this._hasMouseInteraction || this._hasKeyboardInteraction) {\n                return;\n            }\n            this._timeout = setTimeout(()=>{\n                this.hide();\n            }, this._config.delay);\n        }\n        _onInteraction(event, isInteracting) {\n            switch(event.type){\n                case \"mouseover\":\n                case \"mouseout\":\n                    {\n                        this._hasMouseInteraction = isInteracting;\n                        break;\n                    }\n                case \"focusin\":\n                case \"focusout\":\n                    {\n                        this._hasKeyboardInteraction = isInteracting;\n                        break;\n                    }\n            }\n            if (isInteracting) {\n                this._clearTimeout();\n                return;\n            }\n            const nextElement = event.relatedTarget;\n            if (this._element === nextElement || this._element.contains(nextElement)) {\n                return;\n            }\n            this._maybeScheduleHide();\n        }\n        _setListeners() {\n            EventHandler.on(this._element, EVENT_MOUSEOVER, (event)=>this._onInteraction(event, true));\n            EventHandler.on(this._element, EVENT_MOUSEOUT, (event)=>this._onInteraction(event, false));\n            EventHandler.on(this._element, EVENT_FOCUSIN, (event)=>this._onInteraction(event, true));\n            EventHandler.on(this._element, EVENT_FOCUSOUT, (event)=>this._onInteraction(event, false));\n        }\n        _clearTimeout() {\n            clearTimeout(this._timeout);\n            this._timeout = null;\n        }\n        // Static\n        static jQueryInterface(config) {\n            return this.each(function() {\n                const data = Toast.getOrCreateInstance(this, config);\n                if (typeof config === \"string\") {\n                    if (typeof data[config] === \"undefined\") {\n                        throw new TypeError(`No method named \"${config}\"`);\n                    }\n                    data[config](this);\n                }\n            });\n        }\n    }\n    /**\n   * Data API implementation\n   */ enableDismissTrigger(Toast);\n    /**\n   * jQuery\n   */ defineJQueryPlugin(Toast);\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap index.umd.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ const index_umd = {\n        Alert,\n        Button,\n        Carousel,\n        Collapse,\n        Dropdown,\n        Modal,\n        Offcanvas,\n        Popover,\n        ScrollSpy,\n        Tab,\n        Toast,\n        Tooltip\n    };\n    return index_umd;\n}); //# sourceMappingURL=bootstrap.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bootstrap/dist/js/bootstrap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bootstrap/dist/css/bootstrap.min.css":
/*!***********************************************************!*\
  !*** ./node_modules/bootstrap/dist/css/bootstrap.min.css ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"1f139981b9b4\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYm9vdHN0cmFwL2Rpc3QvY3NzL2Jvb3RzdHJhcC5taW4uY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b2NoZWNrZXIvLi9ub2RlX21vZHVsZXMvYm9vdHN0cmFwL2Rpc3QvY3NzL2Jvb3RzdHJhcC5taW4uY3NzPzY1MzkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIxZjEzOTk4MWI5YjRcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bootstrap/dist/css/bootstrap.min.css\n");

/***/ })

};
;